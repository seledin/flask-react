{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","title","console","log","this","fetchData","fetch","method","then","res","json","result","message","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAqFeA,G,kBAhFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIDC,MAAQ,CACXC,MAAO,UANQ,E,iFAUjBC,QAAQC,IAAI,OACZD,QAAQC,IAAIC,KAAKJ,MAAMC,OACvBG,KAAKC,YACLH,QAAQC,IAAI,OACZD,QAAQC,IAAIC,KAAKJ,MAAMC,S,kCAOb,IAAD,OAETK,MAAM,cAAe,CACnBC,OAAQ,QAMPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACG,GACCT,QAAQC,IAAI,UAAWQ,GAEvBT,QAAQC,IAAIQ,EAAOC,SACR,EAENC,SAAW,CACdZ,MAAO,c,+BA8Bb,MACY,UAJAG,KAAKJ,MAAMC,MAKpB,6BACI,sCAEH,mB,GA5EUa,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.7a0b1a43.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\t\n\n  constructor(props) {\n    super(props);\n\n    // this.fetchData = this.fetchData.bind(this);\n\n    this.state = {\n      title: \"before\"\n    };\n  }\n  componentDidMount(){\n    console.log(\"@@@\")\n    console.log(this.state.title)\n    this.fetchData();\n    console.log(\"###\")\n    console.log(this.state.title)\n  }\n\n  // componentDidUpdate(){\n  //   this.fetchData();\n  // }\n\n  fetchData(){\n\n    fetch(`/users/ping`, {\n      method: 'GET',\n      // headers: {\n      //   'Content-type': 'application/json',\n      // },\n      // body: JSON.stringify({\n      //   }),\n    }).then(res => res.json())\n      .then(\n      (result) => {\n        console.log('SUCCESS', result)\n\n        console.log(result.message)\n        var that = this\n        \n        that.setState = {\n          title: \"after\"\n        };\n      },\n    )\n\n    // fetch(`/users/ping`,{\n    //   method: 'GET',\n    // })\n    // .then(result => {\n    //   // This now refers to your component\n    //   // this.setState({data: data}); \n    //   console.log('SUCCESS', result)\n\n    //     console.log(result.message)\n    //     // var that = this\n        \n    //     this.setState = {\n    //       title: \"after\"\n    //     };\n\n    // }).catch(function(error) {\n    //   // error handling\n    // })\n  }\n\n  render() {\n    \n    let title = this.state.title\n    // console.log(title)\n\n    return (\n      title === \"after\" ? \n       <div>\n           <h3>after</h3>\n       </div> \n      : 'Initializing'\n   );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}