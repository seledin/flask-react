{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSearch","user","fetch","then","response","json","repos","console","log","length","setState","state","className","handleSubmit","this","React","Component","SearchBar","event","preventDefault","text","target","value","onSubmit","name","type","placeholder","RepoList","rows","map","repo","index","push","key","defaultProps","RepoItem","href","Date","parse","created_at","toLocaleDateString","description","html_url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAGMA,G,kBAEF,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAMRC,aAAe,SAACC,GAEjBC,MADa,gCAAgCD,EAAK,UAEjDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACG,GACpCC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMG,QAClB,EAAKC,SAAS,CACZJ,MAAOA,QAZX,EAAKK,MAAQ,CACXL,MAAO,IAHO,E,sEAoBhB,OACE,yBAAKM,UAAU,iBACb,mDACA,kBAAC,EAAD,CAAWC,aAAcC,KAAKd,eAC9B,kBAAC,EAAD,CAAUM,MAAOQ,KAAKH,MAAML,a,GA1BpBS,IAAMC,YAgChBC,E,YACJ,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAGRc,aAAe,SAACK,GACdA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOD,KAAKE,MAC/B,EAAKvB,MAAMc,aAAaO,IAPP,E,sEAWjB,OACE,0BAAMG,SAAUT,KAAKD,cACnB,2BACEW,KAAK,OACLZ,UAAU,eACVa,KAAK,OACLC,YAAY,0C,GAlBEX,IAAMC,WA0BxBW,E,iLAGF,IAAIC,EAAO,GAEX,OADEd,KAAKf,MAAMO,MAAMuB,KAAI,SAACC,EAAKC,GAAN,OAAgBH,EAAKI,KAAK,kBAAC,EAAD,CAAUC,IAAKF,EAAOD,KAAMA,QAE3E,yBAAKlB,UAAU,cACZgB,O,GAPcb,IAAMC,WAY7BW,EAASO,aAAe,CACtB5B,MAAO,I,IAGH6B,E,iLAEF,OACI,uBAAGC,KAAK,IAAIxB,UAAU,wEAC1B,yBAAKA,UAAU,wCACb,wBAAIA,UAAU,QAAQE,KAAKf,MAAM+B,KAAKN,MACtC,+BAAQ,IAAIa,KAAKA,KAAKC,MAAMxB,KAAKf,MAAM+B,KAAKS,aAAaC,uBAE3D,uBAAG5B,UAAU,QAAQE,KAAKf,MAAM+B,KAAKW,aACrC,+BAAQ3B,KAAKf,MAAM+B,KAAKY,e,GATL3B,IAAMC,WAedlB,IChFG6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,iB","file":"static/js/main.23578c9e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  \n    constructor(props){\n      super(props);\n      this.state = {\n        repos: []\n      };\n    }\n    \n    handleSearch = (user) =>{\n      let url = 'https://api.github.com/users/'+user+'/repos';\n   fetch(url).\n    then(response => response.json()).then((repos) => {\n        console.log(repos);\n        console.log(repos.length);\n        this.setState({\n          repos: repos\n        });\n      });\n    };\n    \n    render(){\n      return (\n        <div className=\"app-container\">\n          <h3>React fetch example</h3>\n          <SearchBar handleSubmit={this.handleSearch} />\n          <RepoList repos={this.state.repos}/>\n        </div>\n      )\n    }\n  }\n  \n  class SearchBar extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n      \n    handleSubmit = (event) => {\n      event.preventDefault();\n      const text = event.target.text.value;\n      this.props.handleSubmit(text);\n    };\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <input\n            name=\"text\"\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Type github user and press ENTER\"\n          />\n        </form>\n      );\n    }\n  }\n  \n  \n  class RepoList extends React.Component {\n  \n    render(){\n      var rows = [];\n        this.props.repos.map((repo,index) => rows.push(<RepoItem key={index} repo={repo} />))\n      return (\n        <div className=\"list-group\">\n          {rows}\n        </div>\n      )\n    }\n  }\n  RepoList.defaultProps = {\n    repos: []\n  };\n  \n  class RepoItem extends React.Component {\n    render(){\n      return (\n          <a href=\"#\" className=\"list-group-item list-group-item-action flex-column align-items-start\">\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">{this.props.repo.name}</h5>\n        <small>{new Date(Date.parse(this.props.repo.created_at)).toLocaleDateString()}</small>\n      </div>\n      <p className=\"mb-1\">{this.props.repo.description}</p>\n      <small>{this.props.repo.html_url}</small>\n    </a>\n      )\n    }\n  }\n  \n  export default App;\n\n//   ReactDOM.render(<App/>,document.getElementById('app'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}