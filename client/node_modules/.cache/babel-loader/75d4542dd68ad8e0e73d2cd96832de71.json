{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/parts/Info_Box.js\";\nimport React from 'react';\nimport { capitalizeString } from \"./functions\";\nexport class Info_Box extends React.PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, get_info_box(this.props.info_box, this.props.width, this.props.height, this.props.keywords));\n  }\n\n}\nexport default Info_Box;\n\nfunction get_info_box(info_box, box_width, box_height, keywords) {\n  let y_data = [];\n\n  if (info_box !== undefined && info_box.value_y !== undefined) {\n    for (let i = 0; i < info_box.colors.length; i++) {\n      if (info_box.value_y[3][i] !== null && info_box.value_y[2][i] !== null) {\n        y_data.push(React.createElement(\"g\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          fill: \"none\",\n          d: `M 5 ${(i + 1) * 25 + 22} L 20 ${(i + 1) * 25 + 22}`,\n          stroke: info_box.colors[i],\n          strokeWidth: \"2\",\n          opacity: \"1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }), React.createElement(\"text\", {\n          x: \"25\",\n          y: (i + 1) * 25 + 25,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, capitalizeString(keywords[i]), \" \", info_box.value_y[2][i].toFixed(1), \" (min: \", info_box.value_y[3][i].toFixed(1), \" | max: \", info_box.value_y[4][i].toFixed(1), \")\")));\n      } else {\n        y_data.push(React.createElement(\"g\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          fill: \"none\",\n          d: `M 5 ${(i + 1) * 25 + 22} L 20 ${(i + 1) * 25 + 22}`,\n          stroke: info_box.colors[i],\n          strokeWidth: \"2\",\n          opacity: \"1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }), React.createElement(\"text\", {\n          x: \"25\",\n          y: (i + 1) * 25 + 25,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, capitalizeString(keywords[i]), \" \", info_box.value_y[2][i].toFixed(1))));\n      }\n    }\n  }\n\n  let date = formatDate(info_box.value_x);\n  return React.createElement(\"g\", {\n    transform: `translate(${info_box.pos_x}, ${info_box.pos_y})`,\n    \"data-z-index\": \"1\",\n    className: \"plot_info_box\",\n    visibility: info_box.visibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: box_width,\n    height: box_height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"plot_info_box_header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    x: \"5\",\n    y: \"25\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Date: \", date)), y_data);\n}\n\nfunction formatDate(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = dd + '-' + mm + '-' + yyyy;\n}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/parts/Info_Box.js"],"names":["React","capitalizeString","Info_Box","PureComponent","constructor","props","render","get_info_box","info_box","width","height","keywords","box_width","box_height","y_data","undefined","value_y","i","colors","length","push","toFixed","date","formatDate","value_x","pos_x","pos_y","visibility","d","Date","dd","getDate","mm","getMonth","yyyy","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { capitalizeString } from \"./functions\";\n\nexport class Info_Box extends React.PureComponent {\t\n\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n    return (\n      <g>\n        { get_info_box(this.props.info_box, this.props.width, this.props.height, this.props.keywords) }\n      </g>\n    )\n  }\n\n}\n\nexport default Info_Box\n\n\n\nfunction get_info_box(info_box, box_width, box_height, keywords){ \n\n  let y_data = [];\n  \n  if(info_box !== undefined && info_box.value_y !== undefined) {\n      for(let i=0; i<info_box.colors.length; i++){\n          if(info_box.value_y[3][i] !== null && info_box.value_y[2][i] !== null){\n              y_data.push(<g><path fill=\"none\" d={`M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n              <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)} (min: {info_box.value_y[3][i].toFixed(1)} | max: {info_box.value_y[4][i].toFixed(1)})</text></g>)\n          } else {\n              y_data.push(<g><path fill=\"none\" d={`M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n                <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)}</text></g>)\n          }\n      }\n  }\n\n  let date = formatDate(info_box.value_x)\n\n  return (\n  <g transform={`translate(${info_box.pos_x}, ${info_box.pos_y})`} data-z-index=\"1\" className=\"plot_info_box\" visibility={info_box.visibility}>\n    <rect x=\"0\" y=\"0\" width={box_width} height={box_height}  />   \n    <g className=\"plot_info_box_header\">\n      <text x=\"5\" y=\"25\">Date: {date}</text>\n    </g>\n    {y_data}\n  </g>)\n}\n\nfunction formatDate(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = dd+'-'+mm+'-'+yyyy\n}"]},"metadata":{},"sourceType":"module"}