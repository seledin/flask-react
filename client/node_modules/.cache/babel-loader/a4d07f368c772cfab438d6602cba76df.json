{"ast":null,"code":"import { capitalizeString } from \"./functions\";\n\nfunction make_line(point, width) {\n  let line = `M 0 ${point} H ${width}`;\n  return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`;\n}\n\nfunction make_yy_tick(x, y) {\n  let line = `M ${x - 10} ${y} L ${x} ${y}`; // return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`\n\n  return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`;\n}\n\nexport function get_lines(width, height, lines_number) {\n  let frame = height / lines_number;\n  let result = [];\n\n  for (let i = lines_number; i <= lines_number; i++) {\n    let point = frame * i;\n    result.push(make_line(point, width));\n  }\n\n  return result;\n}\nexport function get_y_ticks(height, lines_number) {\n  let result = [];\n  let frame = height / lines_number;\n\n  for (let i = 0; i <= lines_number; i++) {\n    let point = frame * i;\n    result.push(make_yy_tick(0, point));\n  }\n\n  return result;\n}\n\nfunction make_x_tick(x, y) {\n  let line = `M ${x} ${y} L ${x} ${y + 10}`;\n  return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`;\n}\n\nexport function get_ticks(width, height, ticks_number) {\n  let result = [];\n  let frame = width / (ticks_number - 1);\n\n  for (let i = 0; i < ticks_number; i++) {\n    let point = frame * i;\n    result.push(make_x_tick(point, height));\n  } // let frame = width / (length - 1)\n  // for(let i=0; i<ticks_number; i++){\n  //     // result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[data_frame*i][1])}</text>`)\n  //     result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[i][1])}</text>`)\n  // }\n\n\n  return result;\n}\n\nfunction make_y_tick(x, y, value) {\n  return `<text x=\"${x}\" textAnchor=\"end\" class=\"plot_ytick\" y=\"${y}\">${value}</text>`;\n}\n\nexport function get_y_axis(x, y, height, lines_number) {\n  let result = [];\n  let frame = height / lines_number;\n\n  for (let i = 0; i <= lines_number; i++) {\n    result.push(make_y_tick(-35, height - frame * i, i * lines_number));\n  }\n\n  let line = `M ${x} ${y} L ${x} ${y + height}`;\n  result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`);\n  return result;\n}\nexport function prepare_title(title, width, height, x_trans, y_trans) {\n  return `<text x=\"${width / 2}\" class=\"plot_title\" text-anchor=\"middle\" y=\"${-y_trans / 3}\">${title}</text>`;\n}\nexport function prepare_x_axis(width, height, ticks_number, data_mock, title, y_trans) {\n  let result = [];\n  let length = Object.keys(data_mock).length;\n  let data_frame = Math.floor(length / (ticks_number - 1));\n  let frame = width / (ticks_number - 1);\n\n  if (width <= 800) {\n    for (let i = 0; i < ticks_number; i++) {\n      result.push(`<text x=\"${frame * i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 25}\">${formatDate_monthly(data_mock[data_frame * i][1])}</text>`);\n    }\n  } else {\n    for (let i = 0; i < ticks_number; i++) {\n      result.push(`<text x=\"${frame * i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 25}\">${formatDate(data_mock[data_frame * i][1])}</text>`);\n    }\n  }\n\n  let line = `M 0 ${height} H ${width}`;\n  console.log(\"***\");\n  console.log(height);\n  console.log(y_trans);\n  let height_trans = y_trans; // if(width>800){\n  //     height_trans = height_trans/2\n  // }\n\n  if (width > 600) {\n    result.push(`<text x=\"${width / 2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + height_trans - 30}\"><tspan>${title}</tspan></text>`);\n  } else {\n    result.push(`<text x=\"${width / 2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + 40}\"><tspan>${title}</tspan></text>`);\n  }\n\n  result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`);\n  return result;\n} // export function get_x_axis(title, width, height, x_trans, y_trans){\n//     let result = []\n//     let line = `M 0 ${height} H ${width}`;\n//     // console.log(\"***\")\n//     // console.log(y_trans)\n//     let height_trans = y_trans\n//     if(width>800){\n//         height_trans = height_trans/2\n//     }\n//     result.push(`<text x=\"${width/2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + height_trans + 10}\"><tspan>${title}</tspan></text>`)\n//     result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`)\n//     return result\n// }\n\nexport function get_y_axis_label(title, height, x_trans) {\n  return `<text x=\"${x_trans}\" text-anchor=\"middle\" transform=\"translate(0,0) rotate(270 25.140625 309.5)\" class=\"plot_yaxis_title\" y=\"${(height + x_trans) / 2 - 0.1 * x_trans}\"><tspan>${title}</tspan></text>`;\n}\nexport function get_red_line(dimensions, ranges_dates) {\n  let x_frame = dimensions.width / (ranges_dates.max_x - 1); // console.log(\"%%%%\")\n  // console.log(dimensions)\n  // console.log(ranges_dates)\n  // let x = x_frame * 256;\n\n  let x = x_frame * (dimensions.historical_data_length - 1);\n  return `<g>\n        <path fill=\"none\" class=\"plot_pointer_line\" d=\"M ${x} 0 L ${x} ${dimensions.height}\" stroke-dasharray=\"6\" data-z-index=\"0\"></path>\n    </g>`;\n}\nexport function get_mark_line(mark_line, height) {\n  return `<g transform=\"translate(${mark_line.pos}, 0)\">\n        <path fill=\"none\" data-z-index=\"0\" class=\"plot_mark_line\" d=\"M 0 0 L 0 ${height}\" visibility=\"${mark_line.visibility}\" />         \n    </g>`;\n} // export function get_info_box2(info_box, box_width, box_height){ \n//     let y_data = [];\n//     // console.log(info_box.value_y)\n//     if(info_box !== undefined && info_box.value_y !== undefined) {\n//         for(let i=0; i<info_box.colors.length; i++){\n//             y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n//             <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1)*25 + 25}>Series ${i + 1} value y: ${info_box.value_y[2][i]}</text>`)\n//         }\n//     }\n//     let date = formatDate(info_box.value_x)\n//     return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n//         <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n//         <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n//         ${y_data}\n//     </g>`\n// }\n// export function get_y_axis(x, y, height){\n//     let line = `M ${x} ${y} L ${x} ${y + height}`;\n//     return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`\n// }\n\nexport function get_info_box(info_box, box_width, box_height, keywords) {\n  let y_data = [];\n\n  if (info_box !== undefined && info_box.value_y !== undefined) {\n    for (let i = 0; i < info_box.colors.length; i++) {\n      y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1) * 25 + 22} L 20 ${(i + 1) * 25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n             <text x=25 y=${(i + 1) * 25 + 25}>${capitalizeString(keywords[i])} ${info_box.value_y[2][i].toFixed(1)} (min: ${info_box.value_y[3][i].toFixed(1)} | max: ${info_box.value_y[2][i].toFixed(1)})</text>`);\n    }\n  }\n\n  let date = formatDate(info_box.value_x);\n  return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n        <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n        <g class=\"plot_info_box_header\">\n        <text x=5 y=\"25\">Date: ${date}</text>\n        </g>\n        ${y_data}\n    </g>`;\n}\nexport function prepare_legend(dimensions, colors, keywords) {\n  // this.props.dimensions.width)/2 - this.props.dimensions.x_trans, this.props.dimensions.height + this.props.dimensions.y_trans/2\n  let legend = [];\n  let keyword_sizes = []; // console.log(dimensions)\n  // for(let i=0; i<colors.length; i++){\n  //     let l = calculate_translate_for_legend(keywords[i].length);\n  //     let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n  //     legend.push(`\n  //         <g data-z-index=\"1\" transform=\"translate(${translation},3)\">\n  //             <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n  //             <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"1.1em\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n  //         </g>\n  //     `);\n  //     keyword_sizes.push(l);\n  // }\n\n  if (dimensions.width > 600) {\n    for (let i = 0; i < colors.length; i++) {\n      let l = calculate_translate_for_legend(keywords[i].length);\n      let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n      legend.push(`\n                <g data-z-index=\"1\" transform=\"translate(${translation},3)\">\n                    <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n                    <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n                </g>\n            `);\n      keyword_sizes.push(l);\n    }\n\n    let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    let width_trans = dimensions.width2 / 2 - translation / 2 - dimensions.x_trans;\n    let height_trans = dimensions.height + dimensions.y_trans / 2;\n    height_trans = dimensions.height + dimensions.y_trans - dimensions.y_trans2;\n    height_trans = dimensions.height + dimensions.y_trans - 25; // console.log(\"$$$\")\n    // console.log(\"height: \"+ dimensions.height)\n    // console.log(\"y_trans: \"+ dimensions.y_trans)\n\n    return `\n            <g transform=\"translate(${width_trans}, ${height_trans})\" class=\"plot_legend\" >\n                ${legend}\n            </g>`;\n  } else {\n    for (let i = 0; i < colors.length; i++) {\n      let l = calculate_translate_for_legend(keywords[i].length);\n      legend.push(`\n                <g data-z-index=\"1\" transform=\"translate(${dimensions.width / 2 - l / 2}, ${i * 18 + 10})\">\n                    <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n                    <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n                </g>\n            `); // keyword_sizes.push(l);\n    } // let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    // let width_trans = (dimensions.width2)/2 - translation/2 - dimensions.x_trans;\n\n\n    let height_trans = dimensions.height + 2 * dimensions.y_trans;\n    return `\n            <g transform=\"translate(${0}, ${height_trans})\" class=\"plot_legend\" >\n                ${legend}\n            </g>`;\n  }\n}\n\nfunction calculate_translate_for_legend(keyword_length) {\n  return (6, 5) * keyword_length + 55;\n}\n\nfunction formatDate(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = dd + '-' + mm + '-' + yyyy;\n}\n\nfunction formatDate_monthly(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = mm + '-' + yyyy;\n} // function capitalizeString(string) {\n//     return string.charAt(0).toUpperCase() + string.slice(1);\n// }","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/utils_dates/graphics.js"],"names":["capitalizeString","make_line","point","width","line","make_yy_tick","x","y","get_lines","height","lines_number","frame","result","i","push","get_y_ticks","make_x_tick","get_ticks","ticks_number","make_y_tick","value","get_y_axis","prepare_title","title","x_trans","y_trans","prepare_x_axis","data_mock","length","Object","keys","data_frame","Math","floor","formatDate_monthly","formatDate","console","log","height_trans","get_y_axis_label","get_red_line","dimensions","ranges_dates","x_frame","max_x","historical_data_length","get_mark_line","mark_line","pos","visibility","get_info_box","info_box","box_width","box_height","keywords","y_data","undefined","value_y","colors","toFixed","date","value_x","pos_x","pos_y","prepare_legend","legend","keyword_sizes","l","calculate_translate_for_legend","translation","reduce","a","b","width_trans","width2","y_trans2","keyword_length","d","Date","dd","getDate","mm","getMonth","yyyy","getFullYear"],"mappings":"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","sourcesContent":["import { capitalizeString } from \"./functions\";\n\n\nfunction make_line (point, width) {\n\n    let line = `M 0 ${point} H ${width}`;\n    return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`\n}\n\nfunction make_yy_tick(x, y) {\n\n    let line = `M ${x-10} ${y} L ${x} ${y}`;\n    // return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`\n    return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`\n}\n\nexport function get_lines (width, height, lines_number) {\n\n    let frame = height / lines_number;\n\n    let result = [];\n\n    for (let i=lines_number; i<=lines_number; i++){\n        let point = frame * i;\n        result.push(make_line(point,width))\n    }\n\n    return result;\n}\n\nexport function get_y_ticks (height, lines_number) {\n    let result = []\n\n    let frame = height / lines_number;\n\n    for (let i=0; i<=lines_number; i++){\n        let point = frame * i;\n        result.push(make_yy_tick(0,point))\n    }\n\n    return result\n}\n\n\nfunction make_x_tick(x, y) {\n\n    let line = `M ${x} ${y} L ${x} ${y + 10}`;\n    return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`\n}\n\nexport function get_ticks(width, height, ticks_number){\n    let result = [];\n\n    let frame = width / (ticks_number - 1);\n\n    for (let i=0; i<ticks_number; i++){\n        let point = frame * i;\n        result.push(make_x_tick(point, height))\n    }\n\n    // let frame = width / (length - 1)\n    // for(let i=0; i<ticks_number; i++){\n    //     // result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[data_frame*i][1])}</text>`)\n    //     result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[i][1])}</text>`)\n    // }\n\n    return result;\n}\n\nfunction make_y_tick(x, y, value) {\n    return `<text x=\"${x}\" textAnchor=\"end\" class=\"plot_ytick\" y=\"${y}\">${value}</text>`\n}\n\nexport function get_y_axis(x, y, height, lines_number) {\n    let result = [];\n\n    let frame = height / lines_number;\n\n    for(let i=0; i<=lines_number; i++){\n        result.push(make_y_tick(-35, height - frame*(i),i * lines_number));\n    }\n\n    let line = `M ${x} ${y} L ${x} ${y + height}`;\n    result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`)\n\n    return result;\n}\n\nexport function prepare_title(title, width, height, x_trans, y_trans){\n    return `<text x=\"${width/2}\" class=\"plot_title\" text-anchor=\"middle\" y=\"${-y_trans/3}\">${title}</text>`\n}\n\n\n\nexport function prepare_x_axis(width, height, ticks_number, data_mock, title, y_trans){\n    let result = []\n\n    let length = Object.keys(data_mock).length;\n    let data_frame = Math.floor(length/(ticks_number-1));\n\n    let frame = width / (ticks_number - 1)\n\n    if(width<=800){\n        for(let i=0; i<ticks_number; i++){\n            result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 25}\">${formatDate_monthly(data_mock[data_frame*i][1])}</text>`)\n        }\n    }else{\n        for(let i=0; i<ticks_number; i++){\n            result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 25}\">${formatDate(data_mock[data_frame*i][1])}</text>`)\n        }\n    }\n\n    let line = `M 0 ${height} H ${width}`;\n\n    console.log(\"***\")\n    console.log(height)\n    console.log(y_trans)\n\n    let height_trans = y_trans\n    // if(width>800){\n    //     height_trans = height_trans/2\n    // }\n\n    if(width>600){\n        result.push(`<text x=\"${width/2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + height_trans - 30}\"><tspan>${title}</tspan></text>`)\n    }else{\n        result.push(`<text x=\"${width/2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height +40}\"><tspan>${title}</tspan></text>`)\n    }\n    result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`)\n    \n    \n\n    return result \n\n}\n\n// export function get_x_axis(title, width, height, x_trans, y_trans){\n//     let result = []\n//     let line = `M 0 ${height} H ${width}`;\n\n//     // console.log(\"***\")\n//     // console.log(y_trans)\n//     let height_trans = y_trans\n//     if(width>800){\n//         height_trans = height_trans/2\n//     }\n\n//     result.push(`<text x=\"${width/2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + height_trans + 10}\"><tspan>${title}</tspan></text>`)\n//     result.push(`<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`)\n    \n//     return result\n// }\n\nexport function get_y_axis_label(title, height, x_trans){\n    return `<text x=\"${x_trans}\" text-anchor=\"middle\" transform=\"translate(0,0) rotate(270 25.140625 309.5)\" class=\"plot_yaxis_title\" y=\"${(height + x_trans)/2 - 0.1*x_trans}\"><tspan>${title}</tspan></text>`\n}\n\nexport function get_red_line(dimensions, ranges_dates){\n\n    let x_frame = dimensions.width/(ranges_dates.max_x-1)\n\n    // console.log(\"%%%%\")\n    // console.log(dimensions)\n    // console.log(ranges_dates)\n\n    // let x = x_frame * 256;\n    let x = x_frame * (dimensions.historical_data_length - 1);\n\n\n    return `<g>\n        <path fill=\"none\" class=\"plot_pointer_line\" d=\"M ${x} 0 L ${x} ${dimensions.height}\" stroke-dasharray=\"6\" data-z-index=\"0\"></path>\n    </g>`\n}\n\nexport function get_mark_line(mark_line, height){\n    return `<g transform=\"translate(${mark_line.pos}, 0)\">\n        <path fill=\"none\" data-z-index=\"0\" class=\"plot_mark_line\" d=\"M 0 0 L 0 ${height}\" visibility=\"${mark_line.visibility}\" />         \n    </g>`\n}\n\n// export function get_info_box2(info_box, box_width, box_height){ \n\n//     let y_data = [];\n//     // console.log(info_box.value_y)\n    \n//     if(info_box !== undefined && info_box.value_y !== undefined) {\n//         for(let i=0; i<info_box.colors.length; i++){\n//             y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n//             <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1)*25 + 25}>Series ${i + 1} value y: ${info_box.value_y[2][i]}</text>`)\n//         }\n//     }\n\n//     let date = formatDate(info_box.value_x)\n    \n//     return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n//         <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n//         <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n//         ${y_data}\n//     </g>`\n// }\n\n// export function get_y_axis(x, y, height){\n//     let line = `M ${x} ${y} L ${x} ${y + height}`;\n//     return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`\n// }\n\nexport function get_info_box(info_box, box_width, box_height, keywords){ \n\n    let y_data = [];\n    \n    if(info_box !== undefined && info_box.value_y !== undefined) {\n        for(let i=0; i<info_box.colors.length; i++){\n            y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n             <text x=25 y=${(i + 1)*25 + 25}>${capitalizeString(keywords[i])} ${info_box.value_y[2][i].toFixed(1)} (min: ${info_box.value_y[3][i].toFixed(1)} | max: ${info_box.value_y[2][i].toFixed(1)})</text>`)\n        }\n    }\n\n    let date = formatDate(info_box.value_x)\n    \n    return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n        <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n        <g class=\"plot_info_box_header\">\n        <text x=5 y=\"25\">Date: ${date}</text>\n        </g>\n        ${y_data}\n    </g>`\n}\n\nexport function prepare_legend(dimensions, colors, keywords){\n\n    // this.props.dimensions.width)/2 - this.props.dimensions.x_trans, this.props.dimensions.height + this.props.dimensions.y_trans/2\n\n    let legend = [];\n    let keyword_sizes = []\n\n    // console.log(dimensions)\n    \n    // for(let i=0; i<colors.length; i++){\n    //     let l = calculate_translate_for_legend(keywords[i].length);\n        \n\n    //     let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n\n    //     legend.push(`\n    //         <g data-z-index=\"1\" transform=\"translate(${translation},3)\">\n    //             <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n    //             <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"1.1em\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n    //         </g>\n    //     `);\n    //     keyword_sizes.push(l);\n    // }\n\n    if (dimensions.width>600){\n        for(let i=0; i<colors.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n            \n    \n            let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    \n            legend.push(`\n                <g data-z-index=\"1\" transform=\"translate(${translation},3)\">\n                    <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n                    <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n                </g>\n            `);\n            keyword_sizes.push(l);\n        }\n\n        let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n        let width_trans = (dimensions.width2)/2 - translation/2 - dimensions.x_trans;\n        let height_trans = dimensions.height + dimensions.y_trans/2;\n        height_trans = dimensions.height + dimensions.y_trans - dimensions.y_trans2;\n        height_trans = dimensions.height + dimensions.y_trans - 25;\n\n        // console.log(\"$$$\")\n        // console.log(\"height: \"+ dimensions.height)\n        // console.log(\"y_trans: \"+ dimensions.y_trans)\n\n    \n        return `\n            <g transform=\"translate(${width_trans}, ${height_trans})\" class=\"plot_legend\" >\n                ${legend}\n            </g>`\n        \n    } else {\n        for(let i=0; i<colors.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n    \n            legend.push(`\n                <g data-z-index=\"1\" transform=\"translate(${(dimensions.width)/2 - l/2}, ${i*18+10})\">\n                    <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} stroke-width=\"0\"></path>\n                    <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">${capitalizeString(keywords[i])}</text>\n                </g>\n            `);\n            // keyword_sizes.push(l);\n        }\n\n        // let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n        // let width_trans = (dimensions.width2)/2 - translation/2 - dimensions.x_trans;\n        let height_trans = dimensions.height + 2*dimensions.y_trans;\n    \n        return `\n            <g transform=\"translate(${0}, ${height_trans})\" class=\"plot_legend\" >\n                ${legend}\n            </g>`\n    }\n}\n\nfunction calculate_translate_for_legend(keyword_length){\n    return (6,5)*keyword_length + 55;\n}\n\nfunction formatDate(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = dd+'-'+mm+'-'+yyyy\n}\n\nfunction formatDate_monthly(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = mm+'-'+yyyy\n}\n\n// function capitalizeString(string) {\n//     return string.charAt(0).toUpperCase() + string.slice(1);\n// }\n"]},"metadata":{},"sourceType":"module"}