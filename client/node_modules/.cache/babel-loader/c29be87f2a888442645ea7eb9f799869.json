{"ast":null,"code":"import React from'react';import{capitalizeString}from\"./functions\";export var Info_Box=function Info_Box(props){return React.createElement(\"g\",null,get_info_box(props.info_box,props.width,props.height,props.keywords));};export default Info_Box;function get_info_box(info_box,box_width,box_height,keywords){var y_data=[];// if(info_box !== undefined && info_box.value_y !== undefined) {\n//     for(let i=0; i<info_box.colors.length; i++){\n//         if(info_box.value_y[3][i] !== null && info_box.value_y[2][i] !== null){\n//             // y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n//             // <text x=25 y=${(i + 1)*25 + 25}>${capitalizeString(keywords[i])} ${info_box.value_y[2][i].toFixed(1)} (min: ${info_box.value_y[3][i].toFixed(1)} | max: ${info_box.value_y[4][i].toFixed(1)})</text>`)\n//             y_data.push(<g><path fill=\"none\" d={`M 5 {(i + 1)*25 + 22} L 20 {(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n//             <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)} (min: {info_box.value_y[3][i].toFixed(1)} | max: {info_box.value_y[4][i].toFixed(1)})</text></g>)\n//         } else {\n//             y_data.push(<g><path fill=\"none\" d={`M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n//               <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)}</text></g>)\n//         }\n//     }\n// }\nvar date=formatDate(info_box.value_x);return React.createElement(\"g\",{transform:\"translate(\".concat(info_box.pos_x,\", \").concat(info_box.pos_y,\")\"),\"data-z-index\":\"1\",class:\"plot_info_box\",visibility:info_box.visibility},React.createElement(\"rect\",{x:\"0\",y:\"0\",width:box_width,height:box_height}),React.createElement(\"g\",{class:\"plot_info_box_header\"},React.createElement(\"text\",{x:\"5\",y:\"25\"},\"Date: \",date)),y_data);}function formatDate(d){var date=new Date(d);var dd=date.getDate();var mm=date.getMonth()+1;var yyyy=date.getFullYear();if(dd<10){dd='0'+dd;}if(mm<10){mm='0'+mm;};return d=dd+'-'+mm+'-'+yyyy;}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot3/src/plot/parts/Info_Box.js"],"names":["React","capitalizeString","Info_Box","props","get_info_box","info_box","width","height","keywords","box_width","box_height","y_data","date","formatDate","value_x","pos_x","pos_y","visibility","d","Date","dd","getDate","mm","getMonth","yyyy","getFullYear"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,KAAiC,aAAjC,CAEE,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CAC/B,MACE,8BACGC,YAAY,CAACD,KAAK,CAACE,QAAP,CAAiBF,KAAK,CAACG,KAAvB,CAA8BH,KAAK,CAACI,MAApC,CAA4CJ,KAAK,CAACK,QAAlD,CADf,CADF,CAKD,CANM,CAQP,cAAeN,CAAAA,QAAf,CAIF,QAASE,CAAAA,YAAT,CAAsBC,QAAtB,CAAgCI,SAAhC,CAA2CC,UAA3C,CAAuDF,QAAvD,CAAgE,CAE9D,GAAIG,CAAAA,MAAM,CAAG,EAAb,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA,GAAIC,CAAAA,IAAI,CAAGC,UAAU,CAACR,QAAQ,CAACS,OAAV,CAArB,CAGA,MACA,0BAAG,SAAS,qBAAeT,QAAQ,CAACU,KAAxB,cAAkCV,QAAQ,CAACW,KAA3C,KAAZ,CAAiE,eAAa,GAA9E,CAAkF,KAAK,CAAC,eAAxF,CAAwG,UAAU,CAAEX,QAAQ,CAACY,UAA7H,EACE,4BAAM,CAAC,CAAC,GAAR,CAAY,CAAC,CAAC,GAAd,CAAkB,KAAK,CAAER,SAAzB,CAAoC,MAAM,CAAEC,UAA5C,EADF,CAEE,yBAAG,KAAK,CAAC,sBAAT,EACE,4BAAM,CAAC,CAAC,GAAR,CAAY,CAAC,CAAC,IAAd,WAA0BE,IAA1B,CADF,CAFF,CAKGD,MALH,CADA,CAQD,CAED,QAASE,CAAAA,UAAT,CAAoBK,CAApB,CACC,CACC,GAAIN,CAAAA,IAAI,CAAG,GAAIO,CAAAA,IAAJ,CAASD,CAAT,CAAX,CACA,GAAIE,CAAAA,EAAE,CAAGR,IAAI,CAACS,OAAL,EAAT,CACA,GAAIC,CAAAA,EAAE,CAAGV,IAAI,CAACW,QAAL,GAAgB,CAAzB,CACA,GAAIC,CAAAA,IAAI,CAAGZ,IAAI,CAACa,WAAL,EAAX,CACA,GAAGL,EAAE,CAAC,EAAN,CAAS,CAACA,EAAE,CAAC,IAAIA,EAAP,CAAU,CACpB,GAAGE,EAAE,CAAC,EAAN,CAAS,CAACA,EAAE,CAAC,IAAIA,EAAP,CAAU,EACpB,MAAOJ,CAAAA,CAAC,CAAGE,EAAE,CAAC,GAAH,CAAOE,EAAP,CAAU,GAAV,CAAcE,IAAzB,CACD","sourcesContent":["import React from 'react';\nimport { capitalizeString } from \"./functions\";\n\n  export const Info_Box = props => {\n    return (\n      <g>\n        {get_info_box(props.info_box, props.width, props.height, props.keywords)}\n      </g>\n    )\n  };\n  \n  export default Info_Box\n\n\n\nfunction get_info_box(info_box, box_width, box_height, keywords){ \n\n  let y_data = [];\n  \n  // if(info_box !== undefined && info_box.value_y !== undefined) {\n  //     for(let i=0; i<info_box.colors.length; i++){\n          \n  //         if(info_box.value_y[3][i] !== null && info_box.value_y[2][i] !== null){\n  //             // y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n  //             // <text x=25 y=${(i + 1)*25 + 25}>${capitalizeString(keywords[i])} ${info_box.value_y[2][i].toFixed(1)} (min: ${info_box.value_y[3][i].toFixed(1)} | max: ${info_box.value_y[4][i].toFixed(1)})</text>`)\n  //             y_data.push(<g><path fill=\"none\" d={`M 5 {(i + 1)*25 + 22} L 20 {(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n  //             <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)} (min: {info_box.value_y[3][i].toFixed(1)} | max: {info_box.value_y[4][i].toFixed(1)})</text></g>)\n  //         } else {\n  //             y_data.push(<g><path fill=\"none\" d={`M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}`} stroke={info_box.colors[i]} strokeWidth=\"2\" opacity=\"1\"></path>\n              \n  //               <text x=\"25\" y={(i + 1)*25 + 25}>{capitalizeString(keywords[i])} {info_box.value_y[2][i].toFixed(1)}</text></g>)\n  //         }\n\n          \n  //     }\n  // }\n\n  let date = formatDate(info_box.value_x)\n  \n\n  return (\n  <g transform={`translate(${info_box.pos_x}, ${info_box.pos_y})`} data-z-index=\"1\" class=\"plot_info_box\" visibility={info_box.visibility}>\n    <rect x=\"0\" y=\"0\" width={box_width} height={box_height}  />   \n    <g class=\"plot_info_box_header\">\n      <text x=\"5\" y=\"25\">Date: {date}</text>\n    </g>\n    {y_data}\n  </g>)\n}\n\nfunction formatDate(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = dd+'-'+mm+'-'+yyyy\n}"]},"metadata":{},"sourceType":"module"}