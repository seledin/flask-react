{"ast":null,"code":"// import React from 'react';\n// import './App.css';\n// import { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_historical_dates, get_forecasted_dates, get_random_mock_area_array_dates, get_min_value, get_max_value} from './utils_dates/functions'\n// import { appConfig } from './utils_dates/config.js';\n// import AxisX from './components/AxisX';\n// import AxisY from './components/AxisY';\n// import Legend from './components/Legend';\n// import Static_Line from './components/Static_Line';\n// import Pointer_Line from './components/Pointer_Line';\n// import Info_Box from './components/Info_Box';\n// import Area_Path from './components/Area_Path';\n// import Plot from './components/Plot';\n// let dimensions = appConfig.dimensions;\n// // let ranges = appConfig.ranges_dates;\n// let number_of_plots = appConfig.number_of_plots;\n// let array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast;\n// // dimensions.box_height = get_box_height(number_of_plots);\n// let historical_mock1 = get_random_mock_area_array_dates(get_historical_dates(),10,30)\n// let historical_mock2 = get_random_mock_area_array_dates(get_historical_dates(),40,80)\n// let forecasted_mock1 = get_random_mock_area_array_dates(get_forecasted_dates(),10,30)\n// let forecasted_mock2 = get_random_mock_area_array_dates(get_forecasted_dates(),40,80)\n// let historical_data_mock = [historical_mock1, historical_mock2]\n// let forecasted_data_mock = [forecasted_mock1, forecasted_mock2]\n// for(let i=0;i<historical_data_mock.length; i++){\n//   forecasted_data_mock[i].unshift(historical_data_mock[i][historical_data_mock[i].length - 1])\n// }\n// class Test_Plot_Dates extends React.Component {\t\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.handleHoverOff = this.handleHoverOff.bind(this);\n//     this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n//     let x_trans = 85;\n//     let y_trans = 85;\n//     let y_trans2 = 85;\n//     let width = window.innerWidth*(0.6) - 2*x_trans;\n//     // let height = this.props.height - 2*y_trans;\n//     let height = this.props.height - y_trans - y_trans2;\n//     this.divRef = React.createRef();\n//     let min_y = get_min_value(this.props.historical_data);\n//     let max_y = get_max_value(this.props.historical_data);\n//     // console.log(\"ranges\")\n//     // console.log(this.props.ranges)\n//     this.state = {\n//         title: this.props.options.title,\n//         ticks_number: array_length_dates,\n//         x_label: this.props.options.x_label,\n//         y_label: this.props.options.y_label,\n//         mark_line: {\n//           pos: 0,\n//           visibility: \"hidden\"\n//         },\n//         info_box: {\n//           pos_x: 0,\n//           pos_y: 0,\n//           visibility: \"hidden\",\n//           colors: get_random_colors(this.props.number_of_series),\n//         },\n//        scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, width, height, this.props.number_of_series)[0],\n//        scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, width, height, this.props.number_of_series)[1],\n//       //  scaled_historical_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, width, height, 2)[0],\n//       //  scaled_forecasted_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, width, height, 2)[1],\n//        data_map_area_DATES: this.get_data_map_area_DATES(this.props.historical_data, this.props.forecasted_data, array_length_dates, this.props.number_of_series),\n//       //  data_map_area_DATES: this.get_data_map_area_DATES(historical_data_mock, forecasted_data_mock, array_length_dates, 2),\n//        colors: this.get_random_colors(this.props.number_of_series),\n//        info_box_height: this.get_box_height(this.props.number_of_series),\n//        number: this.props.number_of_series,\n//        dimensions: {\n//         width2: width,\n//         width: width/1.1,\n//         height: height,\n//         x_trans: x_trans,\n//         y_trans: y_trans,\n//         y_trans2: y_trans2,\n//         historical_data_length: appConfig.array_length_dates,\n//         forecasted_data_length: appConfig.array_length_dates_forecast,\n//        },\n//        min_y: get_min_value(this.props.historical_data),\n//        max_y: get_max_value(this.props.historical_data), \n//        y_number: 12,\n//     };\n//   }\n//   componentDidMount() {\n//     this.updateWindowDimensions();\n//     window.addEventListener('resize', this.updateWindowDimensions);\n//     this.divRef.current.focus();\n//   }\n//   componentWillUnmount() {\n//     window.removeEventListener('resize', this.updateWindowDimensions);\n//   }\n//   scaling(){\n//   }\n//   updateWindowDimensions() {\n//     let div_width2 = this.divRef.current.clientWidth;\n//     let x_trans = this.props.x_trans;\n//     let y_trans = this.props.y_trans;\n//     let x_trans2 = this.props.x_trans2;\n//     let y_trans2 = this.props.y_trans2;\n//     let div_width = div_width2 - x_trans - x_trans2;\n//     let height = this.props.height - y_trans - y_trans2;\n//     // let height = this.props.height - 2*y_trans;\n//     // console.log(\"$$\")\n//     // console.log(height)\n//     // console.log(y_trans2)\n//     this.setState({\n//       dimensions: {\n//         width2: div_width2,\n//         width: div_width,\n//         height: height,\n//         x_trans: x_trans,\n//         y_trans: y_trans,\n//         x_trans2: x_trans2,\n//         y_trans2: y_trans2,\n//         historical_data_length: appConfig.array_length_dates,\n//         forecasted_data_length: appConfig.array_length_dates_forecast,\n//        },\n//        scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, div_width, height, this.props.number_of_series)[0],\n//        scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, div_width, height, this.props.number_of_series)[1],\n//        min_y: get_min_value(this.props.historical_data),\n//        max_y: get_max_value(this.props.historical_data), \n//       //  scaled_historical_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, div_width, height, 2)[0],\n//       //  scaled_forecasted_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, div_width, height, 2)[1],\n//     });\n//   }\n//   scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series){\n//     return scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series)\n//   }\n//   get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series){\n//     return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series)\n//   }\n//   get_random_colors(number_of_series){\n//     return get_random_colors(number_of_series)\n//   }\n//   get_box_height(number_of_series){\n//     return get_box_height(number_of_series)\n//   }\n//   handleMouseMove(event) {\n//     var e = event.target;\n//     var dim = e.getBoundingClientRect();\n//     var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n//     var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n//     // console.log(x)\n//     // console.log(this.state.dimensions)\n//     if(x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height){\n//       let x_diff = this.props.ranges.max_x - this.props.ranges.min_x;  \n//       let x_frame = this.state.dimensions.width/x_diff;\n//       let key = Math.round((x)/x_frame);\n//       if (this.state.data_map_area_DATES[key] !== undefined){\n//         let left_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) - 1;\n//         let right_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) + 1;\n//         //keys left\n//         for(let i=this.props.ranges.min_x; i<=key; i++){\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             left_index = i\n//           }\n//         }\n//         //keys right\n//         for(let i=key; i<=this.props.ranges.max_x; i++){\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             right_index = i\n//           }\n//         }\n//         //index difference\n//         this.setState({\n//           mark_line: {\n//             pos: x,  \n//           },\n//           info_box: {\n//             pos_x: x,\n//             pos_y: y,\n//             value_x: this.state.data_map_area_DATES[key][1],\n//             value_y: this.state.data_map_area_DATES[key],\n//             colors: get_random_colors(this.props.number_of_series)\n//           }\n//         })\n//         if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//           this.setState({\n//             mark_line: {\n//               pos: x\n//             }\n//           })\n//         }\n//       } else if (key !== undefined){\n// ////////////////////////////\n//         let left_index = key - 1;\n//         let right_index = key + 1;\n//         //keys left\n//         for (let i=key; i>=0; i--) {\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             left_index = i;\n//             break;\n//           }\n//         }\n//         //keys right\n//         for (let i=key; i<=this.props.ranges.max_x; i++) {\n//           if(this.state.data_map_area_DATES[i] !== undefined) {\n//             right_index = i;\n//             break;\n//           }\n//         }\n//         //index difference\n//         let left_diff = key - left_index;\n//         let right_diff = right_index - key;\n//         if((this.state.data_map_area_DATES[left_index] !== undefined) && (this.state.data_map_area_DATES[right_index] !== undefined)){\n//           if (left_diff<=right_diff ) {\n//             this.setState({\n//               mark_line: {\n//                 pos: x,  \n//               },\n//               info_box: {\n//                 pos_x: x,\n//                 pos_y: y,\n//                 value_x: this.state.data_map_area_DATES[key][1],\n//                 value_y: this.state.data_map_area_DATES[key],\n//                 colors: get_random_colors(this.props.number_of_series)\n//               }\n//             })\n//             if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//               this.setState({\n//                 mark_line: {\n//                   pos: x\n//                 }\n//               })\n//             }\n//           } else {\n//             this.setState({\n//               mark_line: {\n//                 pos: x,  \n//               },\n//               info_box: {\n//                 pos_x: x,\n//                 pos_y: y,\n//                 value_x: this.state.data_map_area_DATES[key][1],\n//                 value_y: this.state.data_map_area_DATES[key],\n//                 colors: get_random_colors(this.props.number_of_series)\n//               }\n//             })\n//             if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//               this.setState({\n//                 mark_line: {\n//                   pos: x\n//                 }\n//               })\n//             }\n//           }\n//         }\n// /////////////////\n//       }\n//     } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans){\n//       this.setState({\n//         mark_line: {\n//           visibility: \"hidden\",\n//           pos: 9999\n//         },\n//         info_box: {\n//           visibility: \"hidden\",\n//           pos_x: 9999,\n//           pos_y: 9999,\n//           colors: get_random_colors(this.props.number_of_series)\n//         }\n//       })\n//     }\n//   }\n//   handleHoverOff(event) {\n//     this.setState({\n//       mark_line:{\n//           pos: 0,\n//           visibility: \"hidden\"\n//       },\n//       info_box: {\n//         pos_x: 0,\n//         pos_y: 0,\n//         visibility: \"hidden\",\n//         colors: get_random_colors(this.props.number_of_series)\n//       }\n//     })\n//   }\n//   render() {\n//     // console.log(this.state.min_y)\n//     // console.log(this.state.max_y)\n//     // console.log(\"$$$$$\")\n//     // console.log(Object.keys(this.state.data_map_area_DATES).length)\n//     // console.log(this.state.data_map_area_DATES)\n//     // console.log(this.state.dimensions)\n//     // console.log(this.state.scaled_forecasted_data)\n//     // console.log(this.state.scaled_historical_data)\n//     let area_paths = this.state.scaled_historical_data.map(( entity, index ) => {\n//       return (\n//         <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"none\"} slice={4}/>\n//       );\n//     });\n//     let area_paths_future = this.state.scaled_forecasted_data.map(( entity, index ) => {\n//       return (\n//         <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"dash\"} />\n//       );\n//     });\n//     let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n//     let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n//     const aa = this.state.max_y;\n//     const bb = this.state.min_y;\n//     // console.log(\"max: \" + aa)\n//     // console.log(\"min: \" + bb)\n//     let lower_bound = (Math.ceil(((bb)+1) / 10)-1) * 10\n//     let upper_bound = Math.ceil((Math.abs(aa)+1) / 10) * 10\n//     let calc_y_number = (upper_bound - lower_bound)/10;\n//     // console.log(\"!! \" + lower_bound)\n//     // console.log(\"@@ \" + upper_bound)\n//     // console.log(\"## \" + calc_y_number)\n//     return (\n//       <div ref={this.divRef}>\n//         <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" onMouseMove={this.handleMouseMove} onMouseLeave={this.handleHoverOff} className=\"test_plot\" width={this.state.dimensions.width2} height={this.props.height} viewBox={v_b}>\n//           {/* <rect fill=\"#ffffff\" className=\"\" x=\"0\" y=\"0\" width={dimensions.width} height={dimensions.height} rx=\"0\" ry=\"0\"></rect>  */}\n//             <g>\n//               <g transform={v_trans}>\n//                 { area_paths }\n//                 { area_paths_future }\n//                 {/* <Plot dimensions={this.state.dimensions} y_number={this.state.y_number} title={this.state.title} />\n//                 <AxisY dimensions={this.state.dimensions} y_number={this.state.y_number} y_label={this.state.y_label} /> */}\n//                 <Plot dimensions={this.state.dimensions} y_number={calc_y_number} title={this.state.title} />\n//                 <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={lower_bound} upper_bound={upper_bound} />\n//                 {/* <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={this.props.ranges.min_y} upper_bound={this.props.ranges.max_y} /> */}\n//                 <AxisX dimensions={this.state.dimensions} x_label={this.state.x_label} ticks={12} dates={this.state.data_map_area_DATES} />\n//                 <Legend dimensions={this.state.dimensions} colors={this.state.colors} keywords={this.props.keywords} />\n//                 <Static_Line dimensions={this.state.dimensions} ranges={this.props.ranges} />\n//                 <Pointer_Line mark_line={this.state.mark_line} height={this.state.dimensions.height} />\n//                 <Info_Box info_box={this.state.info_box} width={dimensions.box_width} height={this.state.info_box_height} keywords={this.props.keywords}  />\n//               </g>\n//             </g>\n//         </svg>\n//       </div>\n//     );\n//   }\n// }\n// // function round(num,pre) {\n// //   if( !pre) pre = 0;\n// //   var pow = Math.pow(10,pre);\n// //   return Math.round(num*pow)/pow;\n// // }\n// export default Test_Plot_Dates;","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/Test_Plot_Dates.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\n// import './App.css';\n// import { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_historical_dates, get_forecasted_dates, get_random_mock_area_array_dates, get_min_value, get_max_value} from './utils_dates/functions'\n// import { appConfig } from './utils_dates/config.js';\n\n// import AxisX from './components/AxisX';\n// import AxisY from './components/AxisY';\n// import Legend from './components/Legend';\n// import Static_Line from './components/Static_Line';\n// import Pointer_Line from './components/Pointer_Line';\n// import Info_Box from './components/Info_Box';\n// import Area_Path from './components/Area_Path';\n// import Plot from './components/Plot';\n\n\n// let dimensions = appConfig.dimensions;\n// // let ranges = appConfig.ranges_dates;\n// let number_of_plots = appConfig.number_of_plots;\n// let array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast;\n\n// // dimensions.box_height = get_box_height(number_of_plots);\n\n// let historical_mock1 = get_random_mock_area_array_dates(get_historical_dates(),10,30)\n// let historical_mock2 = get_random_mock_area_array_dates(get_historical_dates(),40,80)\n\n// let forecasted_mock1 = get_random_mock_area_array_dates(get_forecasted_dates(),10,30)\n// let forecasted_mock2 = get_random_mock_area_array_dates(get_forecasted_dates(),40,80)\n\n// let historical_data_mock = [historical_mock1, historical_mock2]\n// let forecasted_data_mock = [forecasted_mock1, forecasted_mock2]\n\n// for(let i=0;i<historical_data_mock.length; i++){\n//   forecasted_data_mock[i].unshift(historical_data_mock[i][historical_data_mock[i].length - 1])\n// }\n\n// class Test_Plot_Dates extends React.Component {\t\n\n//   constructor(props) {\n//     super(props);\n\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.handleHoverOff = this.handleHoverOff.bind(this);\n//     this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n//     let x_trans = 85;\n//     let y_trans = 85;\n//     let y_trans2 = 85;\n\n//     let width = window.innerWidth*(0.6) - 2*x_trans;\n//     // let height = this.props.height - 2*y_trans;\n//     let height = this.props.height - y_trans - y_trans2;\n\n//     this.divRef = React.createRef();\n\n//     let min_y = get_min_value(this.props.historical_data);\n//     let max_y = get_max_value(this.props.historical_data);\n\n//     // console.log(\"ranges\")\n//     // console.log(this.props.ranges)\n\n//     this.state = {\n//         title: this.props.options.title,\n//         ticks_number: array_length_dates,\n//         x_label: this.props.options.x_label,\n//         y_label: this.props.options.y_label,\n//         mark_line: {\n//           pos: 0,\n//           visibility: \"hidden\"\n//         },\n//         info_box: {\n//           pos_x: 0,\n//           pos_y: 0,\n//           visibility: \"hidden\",\n//           colors: get_random_colors(this.props.number_of_series),\n//         },\n//        scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, width, height, this.props.number_of_series)[0],\n//        scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, width, height, this.props.number_of_series)[1],\n\n//       //  scaled_historical_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, width, height, 2)[0],\n//       //  scaled_forecasted_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, width, height, 2)[1],\n\n//        data_map_area_DATES: this.get_data_map_area_DATES(this.props.historical_data, this.props.forecasted_data, array_length_dates, this.props.number_of_series),\n//       //  data_map_area_DATES: this.get_data_map_area_DATES(historical_data_mock, forecasted_data_mock, array_length_dates, 2),\n\n//        colors: this.get_random_colors(this.props.number_of_series),\n//        info_box_height: this.get_box_height(this.props.number_of_series),\n//        number: this.props.number_of_series,\n//        dimensions: {\n//         width2: width,\n//         width: width/1.1,\n//         height: height,\n//         x_trans: x_trans,\n//         y_trans: y_trans,\n//         y_trans2: y_trans2,\n//         historical_data_length: appConfig.array_length_dates,\n//         forecasted_data_length: appConfig.array_length_dates_forecast,\n//        },\n//        min_y: get_min_value(this.props.historical_data),\n//        max_y: get_max_value(this.props.historical_data), \n//        y_number: 12,\n//     };\n//   }\n\n\n//   componentDidMount() {\n//     this.updateWindowDimensions();\n//     window.addEventListener('resize', this.updateWindowDimensions);\n//     this.divRef.current.focus();\n//   }\n  \n//   componentWillUnmount() {\n//     window.removeEventListener('resize', this.updateWindowDimensions);\n//   }\n\n//   scaling(){\n\n//   }\n  \n//   updateWindowDimensions() {\n    \n//     let div_width2 = this.divRef.current.clientWidth;\n\n//     let x_trans = this.props.x_trans;\n//     let y_trans = this.props.y_trans;\n//     let x_trans2 = this.props.x_trans2;\n//     let y_trans2 = this.props.y_trans2;\n\n//     let div_width = div_width2 - x_trans - x_trans2;\n//     let height = this.props.height - y_trans - y_trans2;\n//     // let height = this.props.height - 2*y_trans;\n\n//     // console.log(\"$$\")\n//     // console.log(height)\n//     // console.log(y_trans2)\n\n//     this.setState({\n//       dimensions: {\n//         width2: div_width2,\n//         width: div_width,\n//         height: height,\n//         x_trans: x_trans,\n//         y_trans: y_trans,\n//         x_trans2: x_trans2,\n//         y_trans2: y_trans2,\n//         historical_data_length: appConfig.array_length_dates,\n//         forecasted_data_length: appConfig.array_length_dates_forecast,\n//        },\n//        scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, div_width, height, this.props.number_of_series)[0],\n//        scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, this.props.ranges, div_width, height, this.props.number_of_series)[1],\n//        min_y: get_min_value(this.props.historical_data),\n//        max_y: get_max_value(this.props.historical_data), \n\n//       //  scaled_historical_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, div_width, height, 2)[0],\n//       //  scaled_forecasted_data: this.scale_data_mocks(historical_data_mock, forecasted_data_mock, ranges, div_width, height, 2)[1],\n       \n//     });\n//   }\n\n//   scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series){\n//     return scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series)\n//   }\n\n//   get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series){\n//     return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series)\n//   }\n\n//   get_random_colors(number_of_series){\n//     return get_random_colors(number_of_series)\n//   }\n\n//   get_box_height(number_of_series){\n//     return get_box_height(number_of_series)\n//   }\n\n\n//   handleMouseMove(event) {\n//     var e = event.target;\n//     var dim = e.getBoundingClientRect();\n//     var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n//     var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n//     // console.log(x)\n//     // console.log(this.state.dimensions)\n\n\n//     if(x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height){\n\n//       let x_diff = this.props.ranges.max_x - this.props.ranges.min_x;  \n//       let x_frame = this.state.dimensions.width/x_diff;\n//       let key = Math.round((x)/x_frame);\n\n//       if (this.state.data_map_area_DATES[key] !== undefined){\n\n//         let left_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) - 1;\n//         let right_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) + 1;\n\n//         //keys left\n//         for(let i=this.props.ranges.min_x; i<=key; i++){\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             left_index = i\n//           }\n//         }\n\n//         //keys right\n//         for(let i=key; i<=this.props.ranges.max_x; i++){\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             right_index = i\n//           }\n//         }\n    \n//         //index difference\n//         this.setState({\n//           mark_line: {\n//             pos: x,  \n//           },\n//           info_box: {\n//             pos_x: x,\n//             pos_y: y,\n//             value_x: this.state.data_map_area_DATES[key][1],\n//             value_y: this.state.data_map_area_DATES[key],\n//             colors: get_random_colors(this.props.number_of_series)\n//           }\n//         })\n//         if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//           this.setState({\n//             mark_line: {\n//               pos: x\n//             }\n//           })\n//         }\n//       } else if (key !== undefined){\n// ////////////////////////////\n\n//         let left_index = key - 1;\n//         let right_index = key + 1;\n        \n//         //keys left\n//         for (let i=key; i>=0; i--) {\n//           if(this.state.data_map_area_DATES[i] !== undefined){\n//             left_index = i;\n//             break;\n//           }\n//         }\n\n//         //keys right\n//         for (let i=key; i<=this.props.ranges.max_x; i++) {\n//           if(this.state.data_map_area_DATES[i] !== undefined) {\n//             right_index = i;\n//             break;\n//           }\n//         }\n\n//         //index difference\n//         let left_diff = key - left_index;\n//         let right_diff = right_index - key;\n\n\n//         if((this.state.data_map_area_DATES[left_index] !== undefined) && (this.state.data_map_area_DATES[right_index] !== undefined)){\n//           if (left_diff<=right_diff ) {\n//             this.setState({\n//               mark_line: {\n//                 pos: x,  \n//               },\n//               info_box: {\n//                 pos_x: x,\n//                 pos_y: y,\n//                 value_x: this.state.data_map_area_DATES[key][1],\n//                 value_y: this.state.data_map_area_DATES[key],\n//                 colors: get_random_colors(this.props.number_of_series)\n//               }\n//             })\n//             if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//               this.setState({\n//                 mark_line: {\n//                   pos: x\n//                 }\n//               })\n//             }\n//           } else {\n//             this.setState({\n//               mark_line: {\n//                 pos: x,  \n//               },\n//               info_box: {\n//                 pos_x: x,\n//                 pos_y: y,\n//                 value_x: this.state.data_map_area_DATES[key][1],\n//                 value_y: this.state.data_map_area_DATES[key],\n//                 colors: get_random_colors(this.props.number_of_series)\n//               }\n//             })\n//             if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n//               this.setState({\n//                 mark_line: {\n//                   pos: x\n//                 }\n//               })\n//             }\n//           }\n\n//         }\n// /////////////////\n\n//       }\n//     } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans){\n//       this.setState({\n//         mark_line: {\n//           visibility: \"hidden\",\n//           pos: 9999\n//         },\n//         info_box: {\n//           visibility: \"hidden\",\n//           pos_x: 9999,\n//           pos_y: 9999,\n//           colors: get_random_colors(this.props.number_of_series)\n//         }\n//       })\n//     }\n//   }\n  \n\n//   handleHoverOff(event) {\n//     this.setState({\n//       mark_line:{\n//           pos: 0,\n//           visibility: \"hidden\"\n//       },\n//       info_box: {\n//         pos_x: 0,\n//         pos_y: 0,\n//         visibility: \"hidden\",\n//         colors: get_random_colors(this.props.number_of_series)\n//       }\n//     })\n//   }\n\n//   render() {\n\n//     // console.log(this.state.min_y)\n//     // console.log(this.state.max_y)\n//     // console.log(\"$$$$$\")\n//     // console.log(Object.keys(this.state.data_map_area_DATES).length)\n//     // console.log(this.state.data_map_area_DATES)\n//     // console.log(this.state.dimensions)\n//     // console.log(this.state.scaled_forecasted_data)\n\n//     // console.log(this.state.scaled_historical_data)\n\n//     let area_paths = this.state.scaled_historical_data.map(( entity, index ) => {\n//       return (\n//         <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"none\"} slice={4}/>\n//       );\n//     });\n\n//     let area_paths_future = this.state.scaled_forecasted_data.map(( entity, index ) => {\n//       return (\n//         <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"dash\"} />\n//       );\n//     });\n\n//     let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n//     let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n\n//     const aa = this.state.max_y;\n//     const bb = this.state.min_y;\n\n//     // console.log(\"max: \" + aa)\n//     // console.log(\"min: \" + bb)\n\n//     let lower_bound = (Math.ceil(((bb)+1) / 10)-1) * 10\n//     let upper_bound = Math.ceil((Math.abs(aa)+1) / 10) * 10\n\n\n//     let calc_y_number = (upper_bound - lower_bound)/10;\n\n//     // console.log(\"!! \" + lower_bound)\n//     // console.log(\"@@ \" + upper_bound)\n//     // console.log(\"## \" + calc_y_number)\n\n\n//     return (\n//       <div ref={this.divRef}>\n//         <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" onMouseMove={this.handleMouseMove} onMouseLeave={this.handleHoverOff} className=\"test_plot\" width={this.state.dimensions.width2} height={this.props.height} viewBox={v_b}>\n//           {/* <rect fill=\"#ffffff\" className=\"\" x=\"0\" y=\"0\" width={dimensions.width} height={dimensions.height} rx=\"0\" ry=\"0\"></rect>  */}\n//             <g>\n//               <g transform={v_trans}>\n\n//                 { area_paths }\n\n//                 { area_paths_future }\n                \n//                 {/* <Plot dimensions={this.state.dimensions} y_number={this.state.y_number} title={this.state.title} />\n\n//                 <AxisY dimensions={this.state.dimensions} y_number={this.state.y_number} y_label={this.state.y_label} /> */}\n\n//                 <Plot dimensions={this.state.dimensions} y_number={calc_y_number} title={this.state.title} />\n\n//                 <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={lower_bound} upper_bound={upper_bound} />\n\n//                 {/* <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={this.props.ranges.min_y} upper_bound={this.props.ranges.max_y} /> */}\n\n//                 <AxisX dimensions={this.state.dimensions} x_label={this.state.x_label} ticks={12} dates={this.state.data_map_area_DATES} />\n                \n//                 <Legend dimensions={this.state.dimensions} colors={this.state.colors} keywords={this.props.keywords} />\n\n//                 <Static_Line dimensions={this.state.dimensions} ranges={this.props.ranges} />\n\n//                 <Pointer_Line mark_line={this.state.mark_line} height={this.state.dimensions.height} />\n\n//                 <Info_Box info_box={this.state.info_box} width={dimensions.box_width} height={this.state.info_box_height} keywords={this.props.keywords}  />\n                \n//               </g>\n//             </g>\n//         </svg>\n//       </div>\n//     );\n//   }\n// }\n\n// // function round(num,pre) {\n// //   if( !pre) pre = 0;\n// //   var pow = Math.pow(10,pre);\n// //   return Math.round(num*pow)/pow;\n// // }\n\n// export default Test_Plot_Dates;\n"]},"metadata":{},"sourceType":"module"}