{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/parts/Legend.js\";\nimport React from 'react';\nimport { capitalizeString } from \"./functions\";\nexport class Legend extends React.PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, prepare_legend(this.props.dimensions, this.props.colors, this.props.keywords));\n  }\n\n}\nexport default Legend;\n\nfunction prepare_legend(dimensions, colors, keywords) {\n  let legend = [];\n  let keyword_sizes = [];\n\n  if (dimensions.width2 > 700) {\n    for (let i = 0; i < colors.length; i++) {\n      let l = calculate_translate_for_legend(keywords[i].length);\n      let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n      legend.push(React.createElement(\"g\", {\n        key: i,\n        \"data-z-index\": \"1\",\n        transform: `translate(${translation},3)`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        fill: \"none\",\n        d: \"M 0 11 L 30 11\",\n        stroke: colors[i],\n        strokeWidth: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"text\", {\n        x: \"35\",\n        textAnchor: \"start\",\n        \"data-z-index\": \"0\",\n        y: \"15\",\n        fontSize: \"12px\",\n        stroke: \"#6c757d\",\n        \"stroke-width\": \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, capitalizeString(keywords[i]))));\n      keyword_sizes.push(l);\n    }\n\n    let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    let width_trans = dimensions.width2 / 2 - translation / 2 - dimensions.x_trans;\n    let height_trans = dimensions.height + dimensions.y_trans / 2;\n    height_trans = dimensions.height + dimensions.y_trans - dimensions.y_trans2;\n    height_trans = dimensions.height + dimensions.y_trans - 25;\n    return React.createElement(\"g\", {\n      transform: `translate(${width_trans}, ${height_trans})`,\n      class: \"plot_legend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, legend);\n  } else {\n    for (let i = 0; i < keywords.length; i++) {\n      let l = calculate_translate_for_legend(keywords[i].length);\n      keyword_sizes.push(l);\n    }\n\n    for (let i = 0; i < colors.length; i++) {\n      let trans = Math.max(...keyword_sizes);\n      legend.push(React.createElement(\"g\", {\n        \"data-z-index\": \"1\",\n        transform: `translate(${dimensions.width / 2 - trans / 2}, ${i * 18 + 10})`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        fill: \"none\",\n        d: \"M 0 11 L 30 11\",\n        stroke: colors[i],\n        \"stroke-width\": \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"text\", {\n        x: \"35\",\n        textAnchor: \"start\",\n        \"data-z-index\": \"0\",\n        y: \"15\",\n        \"font-size\": \"12px\",\n        stroke: \"#6c757d\",\n        \"stroke-width\": \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, capitalizeString(keywords[i]))));\n    }\n\n    let height_trans = dimensions.height + 43;\n    return React.createElement(\"g\", {\n      transform: `translate(${0}, ${height_trans})`,\n      class: \"plot_legend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, legend);\n  }\n}\n\nfunction calculate_translate_for_legend(keyword_length) {\n  return (6, 5) * keyword_length + 55;\n}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/parts/Legend.js"],"names":["React","capitalizeString","Legend","PureComponent","constructor","props","render","prepare_legend","dimensions","colors","keywords","legend","keyword_sizes","width2","i","length","l","calculate_translate_for_legend","translation","reduce","a","b","push","width_trans","x_trans","height_trans","height","y_trans","y_trans2","trans","Math","max","width","keyword_length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { capitalizeString } from \"./functions\";\n\nexport class Legend extends React.PureComponent {\t\n\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n        return (\n            <g>{ prepare_legend(this.props.dimensions, this.props.colors, this.props.keywords) }</g>\n        )\n    }\n}\n\nexport default Legend;\n\n\n\nfunction prepare_legend(dimensions, colors, keywords) {\n\n    let legend = [];\n    let keyword_sizes = []\n\n    if (dimensions.width2>700){\n        for(let i=0; i<colors.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n            \n    \n            let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    \n            legend.push(\n              <g key={i} data-z-index=\"1\" transform={`translate(${translation},3)`}>\n                  <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke={colors[i]} strokeWidth=\"0\"></path>\n                  <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" fontSize=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">{capitalizeString(keywords[i])}</text>\n              </g>\n        );\n\n            keyword_sizes.push(l);\n        }\n\n        let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n        let width_trans = (dimensions.width2)/2 - translation/2 - dimensions.x_trans;\n        let height_trans = dimensions.height + dimensions.y_trans/2;\n        height_trans = dimensions.height + dimensions.y_trans - dimensions.y_trans2;\n        height_trans = dimensions.height + dimensions.y_trans - 25;\n    \n        return (\n            <g transform={`translate(${width_trans}, ${height_trans})`} class=\"plot_legend\" >\n                {legend}\n            </g>)\n        \n    } else {\n        for(let i=0; i<keywords.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n            keyword_sizes.push(l);\n        }\n\n        for(let i=0; i<colors.length; i++){\n\n            let trans = Math.max(...keyword_sizes);\n    \n            legend.push(\n            <g data-z-index=\"1\" transform={`translate(${(dimensions.width)/2 - trans/2}, ${i*18+10})`}>\n                <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke={colors[i]} stroke-width=\"0\"></path>\n                <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">{capitalizeString(keywords[i])}</text>\n            </g>\n        );\n        }\n\n        let height_trans = dimensions.height + 43;\n    \n        return (\n            <g transform={`translate(${0}, ${height_trans})`} class=\"plot_legend\" >\n                {legend}\n            </g>)\n    }\n}\n\nfunction calculate_translate_for_legend(keyword_length){\n    return (6,5)*keyword_length + 55;\n}"]},"metadata":{},"sourceType":"module"}