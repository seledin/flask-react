{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/KeywordPlot.js\";\nimport React from 'react';\nimport './App.css';\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_min_value, get_max_value } from './utils/functions';\nimport { appConfig } from './utils/config.js';\nimport AxisX from './parts/AxisX';\nimport AxisY from './parts/AxisY';\nimport Legend from './parts/Legend';\nimport Static_Line from './parts/Static_Line';\nimport Pointer_Line from './parts/Pointer_Line';\nimport Info_Box from './parts/Info_Box';\nimport Area_Path from './parts/Area_Path';\nimport Plot from './parts/Plot';\nlet dimensions = appConfig.dimensions;\nlet array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast;\nexport class KeywordPlot extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleHoverOff = this.handleHoverOff.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    let x_trans_left = 85;\n    let y_trans_up = 85;\n    let y_trans_bottom = 85;\n    let width = window.innerWidth * 0.6 - 2 * x_trans_left;\n    let height = this.props.height - y_trans_up - y_trans_bottom;\n    this.divRef = React.createRef();\n    let min_y = get_min_value(this.props.data.historical_data);\n    let max_y = get_max_value(this.props.data.historical_data);\n    this.state = {\n      title: this.props.options.title,\n      ticks_number: array_length_dates,\n      x_label: this.props.options.x_label,\n      y_label: this.props.options.y_label,\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      },\n      scaled_data: this.scale_data_mocks(this.props.data, this.props.ranges, width, height, this.props.number_of_series),\n      data_map_area_DATES: this.get_data_map_area_DATES(this.props.data.historical_data, this.props.data.forecasted_data, array_length_dates, this.props.number_of_series),\n      colors: this.get_random_colors(this.props.number_of_series),\n      info_box_height: this.get_box_height(this.props.number_of_series),\n      number: this.props.number_of_series,\n      dimensions: {\n        width2: width,\n        width: width / 1.1,\n        height: height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        y_trans2: y_trans_bottom,\n        historical_data_length: appConfig.array_length_dates,\n        forecasted_data_length: appConfig.array_length_dates_forecast\n      },\n      min_y: get_min_value(this.props.data.historical_data),\n      max_y: get_max_value(this.props.data.historical_data),\n      y_number: 12\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.divRef.current.focus();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  scaling() {}\n\n  updateWindowDimensions() {\n    let svg_width = this.divRef.current.clientWidth;\n    let x_trans_left = this.props.x_trans;\n    let y_trans_up = this.props.y_trans;\n    let x_trans_right = this.props.x_trans2;\n    let y_trans_bottom = this.props.y_trans2;\n    let plot_width = svg_width - x_trans_left - x_trans_right;\n    let plot_height = this.props.height - y_trans_up - y_trans_bottom;\n    this.setState({\n      dimensions: {\n        width2: svg_width,\n        width: plot_width,\n        height: plot_height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        x_trans2: x_trans_right,\n        y_trans2: y_trans_bottom,\n        historical_data_length: appConfig.array_length_dates,\n        forecasted_data_length: appConfig.array_length_dates_forecast\n      },\n      scaled_data: this.scale_data_mocks(this.props.data, this.props.ranges, plot_width, plot_height, this.props.number_of_series)\n    });\n  }\n\n  scale_data_mocks(data, ranges, width, height, number_of_series) {\n    return scale_data_mocks(data, ranges, width, height, number_of_series);\n  }\n\n  get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series) {\n    return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series);\n  }\n\n  get_random_colors(number_of_series) {\n    return get_random_colors(number_of_series);\n  }\n\n  get_box_height(number_of_series) {\n    return get_box_height(number_of_series);\n  }\n\n  handleMouseMove(event) {\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n    if (x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height) {\n      let x_diff = this.props.ranges.max_x - this.props.ranges.min_x;\n      let x_frame = this.state.dimensions.width / x_diff;\n      let key = Math.round(x / x_frame);\n\n      if (this.state.data_map_area_DATES[key] !== undefined) {\n        let left_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x) / 2) - 1;\n        let right_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x) / 2) + 1; //keys left\n\n        for (let i = this.props.ranges.min_x; i <= key; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= this.props.ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n          }\n        } //index difference\n\n\n        this.setState({\n          mark_line: {\n            pos: x\n          },\n          info_box: {\n            pos_x: x,\n            pos_y: y,\n            value_x: this.state.data_map_area_DATES[key][1],\n            value_y: this.state.data_map_area_DATES[key],\n            colors: get_random_colors(this.props.number_of_series)\n          }\n        });\n\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n          this.setState({\n            mark_line: {\n              pos: x\n            }\n          });\n        }\n      } else if (key !== undefined) {\n        ////////////////////////////\n        let left_index = key - 1;\n        let right_index = key + 1; //keys left\n\n        for (let i = key; i >= 0; i--) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n            break;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= this.props.ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n            break;\n          }\n        } //index difference\n\n\n        let left_diff = key - left_index;\n        let right_diff = right_index - key;\n\n        if (this.state.data_map_area_DATES[left_index] !== undefined && this.state.data_map_area_DATES[right_index] !== undefined) {\n          if (left_diff <= right_diff) {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          } else {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          }\n        } /////////////////\n\n      }\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans) {\n      this.setState({\n        mark_line: {\n          visibility: \"hidden\",\n          pos: 9999\n        },\n        info_box: {\n          visibility: \"hidden\",\n          pos_x: 9999,\n          pos_y: 9999,\n          colors: get_random_colors(this.props.number_of_series)\n        }\n      });\n    }\n  }\n\n  handleHoverOff(event) {\n    this.setState({\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      }\n    });\n  }\n\n  render() {\n    let area_paths = this.state.scaled_data[0].map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"none\",\n        slice: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      });\n    });\n    let area_paths_future = this.state.scaled_data[1].map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"dash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      });\n    });\n    let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n    const aa = this.state.max_y;\n    const bb = this.state.min_y;\n    let lower_bound = (Math.ceil((bb + 1) / 10) - 1) * 10;\n    let upper_bound = Math.ceil((Math.abs(aa) + 1) / 10) * 10;\n    let calc_y_number = (upper_bound - lower_bound) / 10;\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      version: \"1.1\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      preserveAspectRatio: \"none\",\n      onMouseMove: this.handleMouseMove,\n      onMouseLeave: this.handleHoverOff,\n      className: \"test_plot\",\n      width: this.state.dimensions.width2,\n      height: this.props.height,\n      viewBox: v_b,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      transform: v_trans,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, area_paths, area_paths_future, React.createElement(Plot, {\n      dimensions: this.state.dimensions,\n      y_number: this.state.y_number,\n      title: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(AxisY, {\n      dimensions: this.state.dimensions,\n      y_number: calc_y_number,\n      y_label: this.state.y_label,\n      lower_bound: lower_bound,\n      upper_bound: upper_bound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(AxisX, {\n      dimensions: this.state.dimensions,\n      x_label: this.state.x_label,\n      ticks: 12,\n      dates: this.state.data_map_area_DATES,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      dimensions: this.state.dimensions,\n      colors: this.state.colors,\n      keywords: this.props.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(Static_Line, {\n      dimensions: this.state.dimensions,\n      ranges: this.props.ranges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(Pointer_Line, {\n      mark_line: this.state.mark_line,\n      height: this.state.dimensions.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(Info_Box, {\n      info_box: this.state.info_box,\n      width: dimensions.box_width,\n      height: this.state.info_box_height,\n      keywords: this.props.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })))));\n  }\n\n}\nexport default KeywordPlot;","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot/src/plot/KeywordPlot.js"],"names":["React","get_random_colors","get_box_height","get_data_mocks_area_DATES","scale_data_mocks","get_data_map_area_DATES","get_min_value","get_max_value","appConfig","AxisX","AxisY","Legend","Static_Line","Pointer_Line","Info_Box","Area_Path","Plot","dimensions","array_length_dates","array_length_dates_forecast","KeywordPlot","PureComponent","constructor","props","handleMouseMove","bind","handleHoverOff","updateWindowDimensions","x_trans_left","y_trans_up","y_trans_bottom","width","window","innerWidth","height","divRef","createRef","min_y","data","historical_data","max_y","state","title","options","ticks_number","x_label","y_label","mark_line","pos","visibility","info_box","pos_x","pos_y","colors","number_of_series","scaled_data","ranges","data_map_area_DATES","forecasted_data","info_box_height","number","width2","x_trans","y_trans","y_trans2","historical_data_length","forecasted_data_length","y_number","componentDidMount","addEventListener","current","focus","componentWillUnmount","removeEventListener","scaling","svg_width","clientWidth","x_trans_right","x_trans2","plot_width","plot_height","setState","event","e","target","dim","getBoundingClientRect","x","clientX","left","y","clientY","top","x_diff","max_x","min_x","x_frame","key","Math","round","undefined","left_index","right_index","i","value_x","value_y","left_diff","right_diff","render","area_paths","map","entity","index","area_paths_future","v_b","v_trans","aa","bb","lower_bound","ceil","upper_bound","abs","calc_y_number","keywords","box_width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_min_value, get_max_value } from './utils/functions'\nimport { appConfig } from './utils/config.js';\n\nimport AxisX from './parts/AxisX';\nimport AxisY from './parts/AxisY';\nimport Legend from './parts/Legend';\nimport Static_Line from './parts/Static_Line';\nimport Pointer_Line from './parts/Pointer_Line';\nimport Info_Box from './parts/Info_Box';\nimport Area_Path from './parts/Area_Path';\nimport Plot from './parts/Plot';\n\n\nlet dimensions = appConfig.dimensions;\nlet array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast;\n\nexport class KeywordPlot extends React.PureComponent {\t\n\n  constructor(props) {\n    super(props);\n\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleHoverOff = this.handleHoverOff.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    let x_trans_left = 85;\n    let y_trans_up = 85;\n    let y_trans_bottom = 85;\n\n    let width = window.innerWidth*(0.6) - 2*x_trans_left;\n    let height = this.props.height - y_trans_up - y_trans_bottom;\n\n    this.divRef = React.createRef();\n\n    let min_y = get_min_value(this.props.data.historical_data);\n    let max_y = get_max_value(this.props.data.historical_data);\n\n    this.state = {\n        title: this.props.options.title,\n        ticks_number: array_length_dates,\n        x_label: this.props.options.x_label,\n        y_label: this.props.options.y_label,\n        mark_line: {\n          pos: 0,\n          visibility: \"hidden\"\n        },\n        info_box: {\n          pos_x: 0,\n          pos_y: 0,\n          visibility: \"hidden\",\n          colors: get_random_colors(this.props.number_of_series),\n        },\n       scaled_data: this.scale_data_mocks(this.props.data, this.props.ranges, width, height, this.props.number_of_series),\n       data_map_area_DATES: this.get_data_map_area_DATES(this.props.data.historical_data, this.props.data.forecasted_data, array_length_dates, this.props.number_of_series),\n\n       colors: this.get_random_colors(this.props.number_of_series),\n       info_box_height: this.get_box_height(this.props.number_of_series),\n       number: this.props.number_of_series,\n       dimensions: {\n        width2: width,\n        width: width/1.1,\n        height: height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        y_trans2: y_trans_bottom,\n        historical_data_length: appConfig.array_length_dates,\n        forecasted_data_length: appConfig.array_length_dates_forecast,\n       },\n       min_y: get_min_value(this.props.data.historical_data),\n       max_y: get_max_value(this.props.data.historical_data), \n       y_number: 12,\n    };\n  }\n\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.divRef.current.focus();\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  scaling(){\n\n  }\n  \n  updateWindowDimensions() {\n    let svg_width = this.divRef.current.clientWidth;\n\n    let x_trans_left = this.props.x_trans;\n    let y_trans_up = this.props.y_trans;\n    let x_trans_right = this.props.x_trans2;\n    let y_trans_bottom = this.props.y_trans2;\n\n    let plot_width = svg_width - x_trans_left - x_trans_right;\n    let plot_height = this.props.height - y_trans_up - y_trans_bottom;\n\n    this.setState({\n      dimensions: {\n        width2: svg_width,\n        width: plot_width,\n        height: plot_height,\n        x_trans: x_trans_left,\n        y_trans: y_trans_up,\n        x_trans2: x_trans_right,\n        y_trans2: y_trans_bottom,\n        historical_data_length: appConfig.array_length_dates,\n        forecasted_data_length: appConfig.array_length_dates_forecast,\n       },\n       scaled_data: this.scale_data_mocks(this.props.data, this.props.ranges, plot_width, plot_height, this.props.number_of_series),\n    });\n  }\n\n  scale_data_mocks(data, ranges, width, height, number_of_series){\n    return scale_data_mocks(data, ranges, width, height, number_of_series)\n  }\n\n  get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series){\n    return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series)\n  }\n\n  get_random_colors(number_of_series){\n    return get_random_colors(number_of_series)\n  }\n\n  get_box_height(number_of_series){\n    return get_box_height(number_of_series)\n  }\n\n\n  handleMouseMove(event) {\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n    if(x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height){\n\n      let x_diff = this.props.ranges.max_x - this.props.ranges.min_x;  \n      let x_frame = this.state.dimensions.width/x_diff;\n      let key = Math.round((x)/x_frame);\n\n      if (this.state.data_map_area_DATES[key] !== undefined){\n\n        let left_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) - 1;\n        let right_index = Math.round((this.props.ranges.max_x - this.props.ranges.min_x)/2) + 1;\n\n        //keys left\n        for(let i=this.props.ranges.min_x; i<=key; i++){\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            left_index = i\n          }\n        }\n\n        //keys right\n        for(let i=key; i<=this.props.ranges.max_x; i++){\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            right_index = i\n          }\n        }\n    \n        //index difference\n        this.setState({\n          mark_line: {\n            pos: x,  \n          },\n          info_box: {\n            pos_x: x,\n            pos_y: y,\n            value_x: this.state.data_map_area_DATES[key][1],\n            value_y: this.state.data_map_area_DATES[key],\n            colors: get_random_colors(this.props.number_of_series)\n          }\n        })\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n          this.setState({\n            mark_line: {\n              pos: x\n            }\n          })\n        }\n      } else if (key !== undefined){\n////////////////////////////\n\n        let left_index = key - 1;\n        let right_index = key + 1;\n        \n        //keys left\n        for (let i=key; i>=0; i--) {\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            left_index = i;\n            break;\n          }\n        }\n\n        //keys right\n        for (let i=key; i<=this.props.ranges.max_x; i++) {\n          if(this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n            break;\n          }\n        }\n\n        //index difference\n        let left_diff = key - left_index;\n        let right_diff = right_index - key;\n\n\n        if((this.state.data_map_area_DATES[left_index] !== undefined) && (this.state.data_map_area_DATES[right_index] !== undefined)){\n          if (left_diff<=right_diff ) {\n            this.setState({\n              mark_line: {\n                pos: x,  \n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            })\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              })\n            }\n          } else {\n            this.setState({\n              mark_line: {\n                pos: x,  \n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            })\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              })\n            }\n          }\n\n        }\n/////////////////\n\n      }\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans){\n      this.setState({\n        mark_line: {\n          visibility: \"hidden\",\n          pos: 9999\n        },\n        info_box: {\n          visibility: \"hidden\",\n          pos_x: 9999,\n          pos_y: 9999,\n          colors: get_random_colors(this.props.number_of_series)\n        }\n      })\n    }\n  }\n  \n\n  handleHoverOff(event) {\n    this.setState({\n      mark_line:{\n          pos: 0,\n          visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      }\n    })\n  }\n\n  render() {\n\n    let area_paths = this.state.scaled_data[0].map(( entity, index ) => {\n        return (\n          <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"none\"} slice={4}/>\n        );\n      });\n  \n      let area_paths_future = this.state.scaled_data[1].map(( entity, index ) => {\n        return (\n          <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"dash\"} />\n        );\n      });\n\n    let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n\n    const aa = this.state.max_y;\n    const bb = this.state.min_y;\n\n    let lower_bound = (Math.ceil(((bb)+1) / 10)-1) * 10\n    let upper_bound = Math.ceil((Math.abs(aa)+1) / 10) * 10\n\n\n    let calc_y_number = (upper_bound - lower_bound)/10;\n\n    return (\n      <div ref={this.divRef}>\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" onMouseMove={this.handleMouseMove} onMouseLeave={this.handleHoverOff} className=\"test_plot\" width={this.state.dimensions.width2} height={this.props.height} viewBox={v_b}>\n            <g>\n              <g transform={v_trans}>\n\n                { area_paths }\n\n                { area_paths_future }\n                \n                <Plot dimensions={this.state.dimensions} y_number={this.state.y_number} title={this.state.title} />\n\n                <AxisY dimensions={this.state.dimensions} y_number={calc_y_number} y_label={this.state.y_label} lower_bound={lower_bound} upper_bound={upper_bound} />\n\n                <AxisX dimensions={this.state.dimensions} x_label={this.state.x_label} ticks={12} dates={this.state.data_map_area_DATES} />\n                \n                <Legend dimensions={this.state.dimensions} colors={this.state.colors} keywords={this.props.keywords} />\n\n                <Static_Line dimensions={this.state.dimensions} ranges={this.props.ranges} />\n\n                <Pointer_Line mark_line={this.state.mark_line} height={this.state.dimensions.height} />\n\n                <Info_Box info_box={this.state.info_box} width={dimensions.box_width} height={this.state.info_box_height} keywords={this.props.keywords}  />\n                \n              </g>\n            </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default KeywordPlot;\n"]},"metadata":{},"sourceType":"module"}