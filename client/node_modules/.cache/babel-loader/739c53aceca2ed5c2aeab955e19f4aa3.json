{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/Test_Plot_Dates.js\";\nimport React from 'react';\nimport './App.css';\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_historical_dates, get_forecasted_dates, get_random_mock_area_array_dates } from './utils_dates/functions';\nimport { appConfig } from './utils_dates/config.js';\nimport AxisX from './components/AxisX';\nimport AxisY from './components/AxisY';\nimport Legend from './components/Legend';\nimport Static_Line from './components/Static_Line';\nimport Pointer_Line from './components/Pointer_Line';\nimport Info_Box from './components/Info_Box';\nimport Area_Path from './components/Area_Path';\nimport Plot from './components/Plot';\nlet dimensions = appConfig.dimensions;\nlet ranges = appConfig.ranges_dates;\nlet number_of_plots = appConfig.number_of_plots;\nlet array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast; // dimensions.box_height = get_box_height(number_of_plots);\n\nclass Test_Plot_Dates extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleHoverOff = this.handleHoverOff.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    let x_trans = 85;\n    let y_trans = 85;\n    let width = window.innerWidth * 0.6 - 2 * x_trans;\n    let height = this.props.height - 2 * y_trans;\n    this.divRef = React.createRef();\n    this.state = {\n      title: this.props.options.title,\n      y_number: 10,\n      ticks_number: array_length_dates,\n      x_label: this.props.options.x_label,\n      y_label: this.props.options.y_label,\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      },\n      scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, width, height, this.props.number_of_series)[0],\n      scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, width, height, this.props.number_of_series)[1],\n      data_map_area_DATES: this.get_data_map_area_DATES(this.props.historical_data, this.props.forecasted_data, array_length_dates, this.props.number_of_series),\n      colors: this.get_random_colors(this.props.number_of_series),\n      info_box_height: this.get_box_height(this.props.number_of_series),\n      number: this.props.number_of_series,\n      dimensions: {\n        width2: width,\n        width: width / 1.1,\n        height: height,\n        x_trans: x_trans,\n        y_trans: y_trans\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.divRef.current.focus();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    let div_width2 = this.divRef.current.clientWidth;\n    let div_width = div_width2 - 2 * 85;\n    let height = this.props.height - 2 * 85;\n    this.setState({\n      dimensions: {\n        width2: div_width2,\n        width: div_width,\n        height: this.props.height - 2 * 85,\n        x_trans: 85,\n        y_trans: 85\n      },\n      scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, div_width, height, this.props.number_of_series)[0],\n      scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, div_width, height, this.props.number_of_series)[1]\n    });\n  }\n\n  scale_data_mocks(data, forecasted_data, ranges, width, height, number_of_series) {\n    return scale_data_mocks(data, forecasted_data, ranges, width, height, number_of_series);\n  }\n\n  get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series) {\n    return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series);\n  }\n\n  get_random_colors(number_of_series) {\n    return get_random_colors(number_of_series);\n  }\n\n  get_box_height(number_of_series) {\n    return get_box_height(number_of_series);\n  }\n\n  handleMouseMove(event) {\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n    if (x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height) {\n      let x_diff = ranges.max_x - ranges.min_x;\n      let x_frame = this.state.dimensions.width / x_diff;\n      let key = Math.round(x / x_frame);\n\n      if (this.state.data_map_area_DATES[key] !== undefined) {\n        let left_index = Math.round((ranges.max_x - ranges.min_x) / 2) - 1;\n        let right_index = Math.round((ranges.max_x - ranges.min_x) / 2) + 1; //keys left\n\n        for (let i = ranges.min_x; i <= key; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n          }\n        } //index difference\n\n\n        this.setState({\n          mark_line: {\n            pos: x\n          },\n          info_box: {\n            pos_x: x,\n            pos_y: y,\n            value_x: this.state.data_map_area_DATES[key][1],\n            value_y: this.state.data_map_area_DATES[key],\n            colors: get_random_colors(this.props.number_of_series)\n          }\n        });\n\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n          this.setState({\n            mark_line: {\n              pos: x\n            }\n          });\n        }\n      } else if (key !== undefined) {\n        ////////////////////////////\n        let left_index = key - 1;\n        let right_index = key + 1; //keys left\n\n        for (let i = key; i >= 0; i--) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            left_index = i;\n            break;\n          }\n        } //keys right\n\n\n        for (let i = key; i <= ranges.max_x; i++) {\n          if (this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n            break;\n          }\n        } //index difference\n\n\n        let left_diff = key - left_index;\n        let right_diff = right_index - key;\n\n        if (this.state.data_map_area_DATES[left_index] !== undefined && this.state.data_map_area_DATES[right_index] !== undefined) {\n          if (left_diff <= right_diff) {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          } else {\n            this.setState({\n              mark_line: {\n                pos: x\n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            });\n\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              });\n            }\n          }\n        } /////////////////\n\n      }\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans) {\n      this.setState({\n        mark_line: {\n          visibility: \"hidden\",\n          pos: 9999\n        },\n        info_box: {\n          visibility: \"hidden\",\n          pos_x: 9999,\n          pos_y: 9999,\n          colors: get_random_colors(this.props.number_of_series)\n        }\n      });\n    }\n  }\n\n  handleHoverOff(event) {\n    this.setState({\n      mark_line: {\n        pos: 0,\n        visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      }\n    });\n  }\n\n  render() {\n    let area_paths = this.state.scaled_historical_data.map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      });\n    });\n    let area_paths_future = this.state.scaled_forecasted_data.map((entity, index) => {\n      return React.createElement(Area_Path, {\n        key: index,\n        data: entity,\n        color: this.state.colors[index],\n        style: \"dash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      });\n    });\n    let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      version: \"1.1\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      preserveAspectRatio: \"none\",\n      onMouseMove: this.handleMouseMove,\n      onMouseLeave: this.handleHoverOff,\n      className: \"test_plot\",\n      width: this.state.dimensions.width2,\n      height: this.props.height,\n      viewBox: v_b,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      transform: v_trans,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, area_paths, area_paths_future, React.createElement(Plot, {\n      dimensions: this.state.dimensions,\n      y_number: this.state.y_number,\n      title: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(AxisY, {\n      dimensions: this.state.dimensions,\n      y_number: this.state.y_number,\n      y_label: this.state.y_label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(AxisX, {\n      dimensions: this.state.dimensions,\n      x_label: this.state.x_label,\n      ticks: 10,\n      dates: this.state.data_map_area_DATES,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      dimensions: this.state.dimensions,\n      colors: this.state.colors,\n      keywords: this.props.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(Static_Line, {\n      dimensions: this.state.dimensions,\n      ranges: ranges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(Pointer_Line, {\n      mark_line: this.state.mark_line,\n      height: this.state.dimensions.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(Info_Box, {\n      info_box: this.state.info_box,\n      width: dimensions.box_width,\n      height: this.state.info_box_height,\n      keywords: this.props.keywords,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Test_Plot_Dates;","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/Test_Plot_Dates.js"],"names":["React","get_random_colors","get_box_height","get_data_mocks_area_DATES","scale_data_mocks","get_data_map_area_DATES","get_historical_dates","get_forecasted_dates","get_random_mock_area_array_dates","appConfig","AxisX","AxisY","Legend","Static_Line","Pointer_Line","Info_Box","Area_Path","Plot","dimensions","ranges","ranges_dates","number_of_plots","array_length_dates","array_length_dates_forecast","Test_Plot_Dates","Component","constructor","props","handleMouseMove","bind","handleHoverOff","updateWindowDimensions","x_trans","y_trans","width","window","innerWidth","height","divRef","createRef","state","title","options","y_number","ticks_number","x_label","y_label","mark_line","pos","visibility","info_box","pos_x","pos_y","colors","number_of_series","scaled_historical_data","historical_data","forecasted_data","scaled_forecasted_data","data_map_area_DATES","info_box_height","number","width2","componentDidMount","addEventListener","current","focus","componentWillUnmount","removeEventListener","div_width2","clientWidth","div_width","setState","data","event","e","target","dim","getBoundingClientRect","x","clientX","left","y","clientY","top","x_diff","max_x","min_x","x_frame","key","Math","round","undefined","left_index","right_index","i","value_x","value_y","left_diff","right_diff","render","area_paths","map","entity","index","area_paths_future","v_b","v_trans","keywords","box_width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { get_random_colors, get_box_height, get_data_mocks_area_DATES, scale_data_mocks, get_data_map_area_DATES, get_historical_dates, get_forecasted_dates, get_random_mock_area_array_dates} from './utils_dates/functions'\nimport { appConfig } from './utils_dates/config.js';\n\nimport AxisX from './components/AxisX';\nimport AxisY from './components/AxisY';\nimport Legend from './components/Legend';\nimport Static_Line from './components/Static_Line';\nimport Pointer_Line from './components/Pointer_Line';\nimport Info_Box from './components/Info_Box';\nimport Area_Path from './components/Area_Path';\nimport Plot from './components/Plot';\n\n\nlet dimensions = appConfig.dimensions;\nlet ranges = appConfig.ranges_dates;\nlet number_of_plots = appConfig.number_of_plots;\nlet array_length_dates = appConfig.array_length_dates + appConfig.array_length_dates_forecast;\n\n// dimensions.box_height = get_box_height(number_of_plots);\n\n\nclass Test_Plot_Dates extends React.Component {\t\n\n  constructor(props) {\n    super(props);\n\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleHoverOff = this.handleHoverOff.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    let x_trans = 85;\n    let y_trans = 85;\n    let width = window.innerWidth*(0.6) - 2*x_trans\n    let height = this.props.height - 2*y_trans\n\n    this.divRef = React.createRef();\n\n    this.state = {\n        title: this.props.options.title,\n        y_number: 10,\n        ticks_number: array_length_dates,\n        x_label: this.props.options.x_label,\n        y_label: this.props.options.y_label,\n        mark_line: {\n          pos: 0,\n          visibility: \"hidden\"\n        },\n        info_box: {\n          pos_x: 0,\n          pos_y: 0,\n          visibility: \"hidden\",\n          colors: get_random_colors(this.props.number_of_series),\n        },\n       scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, width, height, this.props.number_of_series)[0],\n       scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, width, height, this.props.number_of_series)[1],\n       data_map_area_DATES: this.get_data_map_area_DATES(this.props.historical_data, this.props.forecasted_data, array_length_dates, this.props.number_of_series),\n       colors: this.get_random_colors(this.props.number_of_series),\n       info_box_height: this.get_box_height(this.props.number_of_series),\n       number: this.props.number_of_series,\n       dimensions: {\n        width2: width,\n        width: width/1.1,\n        height: height,\n        x_trans: x_trans,\n        y_trans: y_trans,\n       }\n    };\n  }\n\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.divRef.current.focus();\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  \n  updateWindowDimensions() {\n    \n    let div_width2 = this.divRef.current.clientWidth;\n    let div_width = div_width2 - 2*85;\n    let height = this.props.height - 2*85;\n\n    this.setState({\n      dimensions: {\n        width2: div_width2,\n        width: div_width,\n        height: this.props.height - 2*85,\n        x_trans: 85,\n        y_trans: 85,\n       },\n       scaled_historical_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, div_width, height, this.props.number_of_series)[0],\n       scaled_forecasted_data: this.scale_data_mocks(this.props.historical_data, this.props.forecasted_data, ranges, div_width, height, this.props.number_of_series)[1],\n       \n    });\n  }\n\n  scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series){\n    return scale_data_mocks(data, forecasted_data, ranges, width, height , number_of_series)\n  }\n\n  get_data_map_area_DATES(data, forecasted_data, array_length_dates, number_of_series){\n    return get_data_map_area_DATES(get_data_mocks_area_DATES(data, forecasted_data, number_of_series), array_length_dates, number_of_series)\n  }\n\n  get_random_colors(number_of_series){\n    return get_random_colors(number_of_series)\n  }\n\n  get_box_height(number_of_series){\n    return get_box_height(number_of_series)\n  }\n\n\n  handleMouseMove(event) {\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left - this.state.dimensions.x_trans;\n    var y = event.clientY - dim.top - this.state.dimensions.y_trans;\n\n    if(x >= 0 && y >= 0 && x <= this.state.dimensions.width && y <= this.state.dimensions.height){\n\n      let x_diff = ranges.max_x - ranges.min_x;  \n      let x_frame = this.state.dimensions.width/x_diff;\n      let key = Math.round((x)/x_frame);\n\n      if (this.state.data_map_area_DATES[key] !== undefined){\n\n        let left_index = Math.round((ranges.max_x - ranges.min_x)/2) - 1;\n        let right_index = Math.round((ranges.max_x - ranges.min_x)/2) + 1;\n\n        //keys left\n        for(let i=ranges.min_x; i<=key; i++){\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            left_index = i\n          }\n        }\n\n        //keys right\n        for(let i=key; i<=ranges.max_x; i++){\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            right_index = i\n          }\n        }\n    \n        //index difference\n        this.setState({\n          mark_line: {\n            pos: x,  \n          },\n          info_box: {\n            pos_x: x,\n            pos_y: y,\n            value_x: this.state.data_map_area_DATES[key][1],\n            value_y: this.state.data_map_area_DATES[key],\n            colors: get_random_colors(this.props.number_of_series)\n          }\n        })\n        if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n          this.setState({\n            mark_line: {\n              pos: x\n            }\n          })\n        }\n      } else if (key !== undefined){\n////////////////////////////\n\n        let left_index = key - 1;\n        let right_index = key + 1;\n        \n        //keys left\n        for (let i=key; i>=0; i--) {\n          if(this.state.data_map_area_DATES[i] !== undefined){\n            left_index = i;\n            break;\n          }\n        }\n\n        //keys right\n        for (let i=key; i<=ranges.max_x; i++) {\n          if(this.state.data_map_area_DATES[i] !== undefined) {\n            right_index = i;\n            break;\n          }\n        }\n\n        //index difference\n        let left_diff = key - left_index;\n        let right_diff = right_index - key;\n\n\n        if((this.state.data_map_area_DATES[left_index] !== undefined) && (this.state.data_map_area_DATES[right_index] !== undefined)){\n          if (left_diff<=right_diff ) {\n            this.setState({\n              mark_line: {\n                pos: x,  \n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            })\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              })\n            }\n          } else {\n            this.setState({\n              mark_line: {\n                pos: x,  \n              },\n              info_box: {\n                pos_x: x,\n                pos_y: y,\n                value_x: this.state.data_map_area_DATES[key][1],\n                value_y: this.state.data_map_area_DATES[key],\n                colors: get_random_colors(this.props.number_of_series)\n              }\n            })\n            if (this.state.info_box.visibility === 'hidden' || this.state.info_box.visibility === undefined) {\n              this.setState({\n                mark_line: {\n                  pos: x\n                }\n              })\n            }\n          }\n\n        }\n/////////////////\n\n      }\n    } else if (x > this.state.dimensions.width || y > this.state.dimensions.height || x < this.state.dimensions.x_trans || y < this.state.dimensions.y_trans){\n      this.setState({\n        mark_line: {\n          visibility: \"hidden\",\n          pos: 9999\n        },\n        info_box: {\n          visibility: \"hidden\",\n          pos_x: 9999,\n          pos_y: 9999,\n          colors: get_random_colors(this.props.number_of_series)\n        }\n      })\n    }\n  }\n  \n\n  handleHoverOff(event) {\n    this.setState({\n      mark_line:{\n          pos: 0,\n          visibility: \"hidden\"\n      },\n      info_box: {\n        pos_x: 0,\n        pos_y: 0,\n        visibility: \"hidden\",\n        colors: get_random_colors(this.props.number_of_series)\n      }\n    })\n  }\n\n  render() {\n\n    let area_paths = this.state.scaled_historical_data.map(( entity, index ) => {\n      return (\n        <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"none\"} />\n      );\n    });\n\n    let area_paths_future = this.state.scaled_forecasted_data.map(( entity, index ) => {\n      return (\n        <Area_Path key={index} data={entity} color={this.state.colors[index]} style={\"dash\"} />\n      );\n    });\n\n    let v_b = \"0 0 \" + this.state.dimensions.width2 + \" \" + this.props.height;\n    let v_trans = \"translate(\" + this.state.dimensions.x_trans + \",\" + this.state.dimensions.y_trans + \")\";\n\n    return (\n      <div ref={this.divRef}>\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" onMouseMove={this.handleMouseMove} onMouseLeave={this.handleHoverOff} className=\"test_plot\" width={this.state.dimensions.width2} height={this.props.height} viewBox={v_b}>\n          {/* <rect fill=\"#ffffff\" className=\"\" x=\"0\" y=\"0\" width={dimensions.width} height={dimensions.height} rx=\"0\" ry=\"0\"></rect>  */}\n            <g>\n              <g transform={v_trans}>\n\n                { area_paths }\n\n                { area_paths_future }\n                \n                <Plot dimensions={this.state.dimensions} y_number={this.state.y_number} title={this.state.title} />\n\n                <AxisY dimensions={this.state.dimensions} y_number={this.state.y_number} y_label={this.state.y_label} />\n\n                <AxisX dimensions={this.state.dimensions} x_label={this.state.x_label} ticks={10} dates={this.state.data_map_area_DATES} />\n                \n                <Legend dimensions={this.state.dimensions} colors={this.state.colors} keywords={this.props.keywords} />\n\n                <Static_Line dimensions={this.state.dimensions} ranges={ranges} />\n\n                <Pointer_Line mark_line={this.state.mark_line} height={this.state.dimensions.height} />\n\n                <Info_Box info_box={this.state.info_box} width={dimensions.box_width} height={this.state.info_box_height} keywords={this.props.keywords}  />\n                \n              </g>\n            </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default Test_Plot_Dates;\n"]},"metadata":{},"sourceType":"module"}