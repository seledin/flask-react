{"ast":null,"code":"export function add(a, b) {\n  return a + b;\n} // get random int\n\nexport function get_random(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n} //get random double\n\nexport function get_random_double(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function get_random_array(size, min_x, max_x, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < size; i++) {\n    result.push([get_random(min_x, max_x), get_random(min_y, max_y)]);\n  }\n\n  return result;\n}\nexport function get_random_area_array(size, min_x, max_x, min_y, max_y, s_dev) {\n  let result = [];\n\n  for (let i = 0; i < size; i++) {\n    let y = get_random(min_y, max_y);\n    result.push([i, y - s_dev, y + s_dev, y]);\n  }\n\n  return result;\n}\nexport function scale_data(data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    result.push([data[i][0] * x_frame, height - data[i][1] * y_frame]);\n  }\n\n  return result;\n}\nexport function scale_area_data(area_data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < area_data.length; i++) {\n    result.push([area_data[i][0] * x_frame, height - area_data[i][1] * y_frame, height - area_data[i][2] * y_frame, height - area_data[i][3] * y_frame]);\n  }\n\n  return result;\n} /////////////\n// MOCKED DATA\n\nexport function get_random_mock_array(size, min_x, max_x, min_y, max_y) {\n  let result = [];\n\n  for (let i = min_x; i <= max_x; i++) {\n    result.push([i, get_random(min_y, max_y)]);\n  }\n\n  return result;\n} // /// RANDOM COLOR\n// export function random_rgba() {\n//     var o = Math.round, r = Math.random, s = 123;\n//     return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\n// }\n\nexport function get_random_colors(number) {\n  let colors = [\"#a2cd9f\", \"#6ef4ef\", \"#ea6e2e\", \"#6e224c\", \"#edfc35\", \"\", \"\"];\n  return colors.slice(0, number);\n}\nexport function get_box_height(number) {\n  if (number === 0) {\n    return 0;\n  }\n\n  return 25 * (number + 1) + 10;\n} ///////////////////////////////\n// MOCKED DATA with DATES\n\nexport function get_random_mock_array_dates(dates, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < dates.length; i++) {\n    result.push([i, dates[i], get_random(min_y, max_y)]);\n  }\n\n  return result;\n} // export function get_random_mock_array_area_dates(dates, min_y, max_y){\n//     let result = [];\n//     let std\n//     for (let i=0; i<dates.length; i++){\n//         result.push([i, dates[i] ,get_random(min_y, max_y)])\n//     }\n//     return result;\n// }\n\nexport function scale_data_dates(data, ranges, width, height) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame]);\n  }\n\n  return result;\n}\nexport function scale_data_area_dates(data, ranges, width, height, prefix = 0) {\n  let result = [];\n  let x_diff = ranges.max_x - ranges.min_x;\n  let y_diff = ranges.max_y - ranges.min_y;\n  console.log(\"%%\");\n  console.log(data);\n  console.log(x_diff);\n  let x_frame = width / x_diff;\n  let y_frame = height / y_diff;\n\n  for (let i = 0; i < data.length; i++) {\n    // console.log(data[i])\n    // if(i<255){\n    //     result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame ])\n    // }else{\n    //     result.push([(data[i][0] + 256) * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame ])\n    // }\n    result.push([(i + prefix + 1) * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame]);\n  } // console.log(result)\n\n\n  return result;\n}\nexport function get_random_mock_area_array_dates(dates, min_y, max_y) {\n  let result = [];\n\n  for (let i = 0; i < dates.length; i++) {\n    let s_d1 = get_random(2, 8);\n    let s_d2 = get_random(2, 8);\n    let random = get_random(min_y, max_y);\n    result.push([i, dates[i], random, random - s_d1, random + s_d2]);\n  }\n\n  return result;\n}\nexport function get_data_mocks_area_DATES(data_mocks_area_DATES1, data_mocks_area_DATES2, number) {\n  let result = [];\n\n  for (let i = 0; i < number; i++) {\n    result.push(data_mocks_area_DATES1[i].concat(data_mocks_area_DATES2[i]));\n  }\n\n  return result;\n}\nexport function scale_data_mocks(data_mocks_area_DATES1, data_mocks_area_DATES2, ranges, width, height, number_of_plots) {\n  let scaled_data_mocks_area_DATES = [];\n  let scaled_data_mocks_area_future_DATES = [];\n\n  for (let i = 0; i < number_of_plots; i++) {\n    scaled_data_mocks_area_DATES.push(scale_data_area_dates(data_mocks_area_DATES1[i], ranges, width, height)); // scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data_mocks_area_DATES2[i], ranges, width,  height, 256));\n\n    scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data_mocks_area_DATES2[i], ranges, width, height, 8));\n  }\n\n  return [scaled_data_mocks_area_DATES, scaled_data_mocks_area_future_DATES];\n}\nexport function get_data_map_area_DATES(data_mocks_area_DATES, array_length_dates, number_of_plots) {\n  let data_map_area_DATES = [];\n\n  for (let i = 0; i < array_length_dates; i++) {\n    let y_data_normal = [];\n    let y_data_min = [];\n    let y_data_max = [];\n    let date;\n    date = data_mocks_area_DATES[0][i][1];\n\n    for (let j = 0; j < number_of_plots; j++) {\n      y_data_normal.push(data_mocks_area_DATES[j][i][2]);\n      y_data_min.push(data_mocks_area_DATES[j][i][3]);\n      y_data_max.push(data_mocks_area_DATES[j][i][4]);\n    }\n\n    data_map_area_DATES[i] = [i, date, y_data_normal, y_data_min, y_data_max];\n  }\n\n  return data_map_area_DATES;\n}\nexport function capitalizeString(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function get_historical_dates() {\n  let dates = []; // dates.push(Date.UTC(2010, 1, 18))\n  // dates.push( Date.UTC(2010, 2, 18))\n\n  dates.push(Date.UTC(2010, 3, 18));\n  dates.push(Date.UTC(2010, 4, 18));\n  dates.push(Date.UTC(2010, 5, 18));\n  dates.push(Date.UTC(2010, 6, 18));\n  dates.push(Date.UTC(2010, 7, 18));\n  dates.push(Date.UTC(2010, 8, 18));\n  dates.push(Date.UTC(2010, 9, 18));\n  dates.push(Date.UTC(2010, 10, 18));\n  return dates;\n}\nexport function get_forecasted_dates() {\n  let dates = [Date(Date.UTC(2010, 11, 18)), Date(Date.UTC(2010, 12, 18))];\n  return dates;\n}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/utils_dates/functions.js"],"names":["add","a","b","get_random","min","max","Math","ceil","floor","random","get_random_double","get_random_array","size","min_x","max_x","min_y","max_y","result","i","push","get_random_area_array","s_dev","y","scale_data","data","ranges","width","height","x_diff","y_diff","x_frame","y_frame","length","scale_area_data","area_data","get_random_mock_array","get_random_colors","number","colors","slice","get_box_height","get_random_mock_array_dates","dates","scale_data_dates","scale_data_area_dates","prefix","console","log","get_random_mock_area_array_dates","s_d1","s_d2","get_data_mocks_area_DATES","data_mocks_area_DATES1","data_mocks_area_DATES2","concat","scale_data_mocks","number_of_plots","scaled_data_mocks_area_DATES","scaled_data_mocks_area_future_DATES","get_data_map_area_DATES","data_mocks_area_DATES","array_length_dates","data_map_area_DATES","y_data_normal","y_data_min","y_data_max","date","j","capitalizeString","string","charAt","toUpperCase","get_historical_dates","Date","UTC","get_forecasted_dates"],"mappings":"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","sourcesContent":["\n\nexport function add(a, b){\n    return a + b;\n}\n\n// get random int\nexport function get_random(min, max){\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n//get random double\nexport function get_random_double(min, max){\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function get_random_array(size, min_x, max_x, min_y, max_y){\n    let result = [];\n\n    for (let i=0;i< size; i++){\n        result.push([get_random(min_x, max_x), get_random(min_y, max_y)])\n    }\n\n    return result;\n}\n\nexport function get_random_area_array(size, min_x, max_x, min_y, max_y, s_dev){\n    let result = [];\n\n    for (let i=0;i< size; i++){\n        let y = get_random(min_y, max_y);\n        result.push([i, y - s_dev, y + s_dev, y])\n    }\n\n    return result;\n}\n\nexport function scale_data(data, ranges ,width, height){\n    let result = [];\n\n    let x_diff = ranges.max_x - ranges.min_x;\n    let y_diff = ranges.max_y - ranges.min_y;\n\n    let x_frame = width/x_diff;\n    let y_frame = height/y_diff;\n\n    for (let i=0; i<data.length; i++){\n        result.push([data[i][0] * x_frame, height - data[i][1] * y_frame ])\n    }\n\n    return result;\n}\n\nexport function scale_area_data(area_data, ranges, width, height){\n    let result = [];\n\n    let x_diff = ranges.max_x - ranges.min_x;\n    let y_diff = ranges.max_y - ranges.min_y;\n\n    let x_frame = width/x_diff;\n    let y_frame = height/y_diff;\n\n    for (let i=0; i<area_data.length; i++){\n        result.push([area_data[i][0] * x_frame, height - area_data[i][1] * y_frame, height - area_data[i][2] * y_frame, height - area_data[i][3] * y_frame])\n    }\n\n    return result;\n}\n\n\n/////////////\n// MOCKED DATA\n\nexport function get_random_mock_array(size, min_x, max_x, min_y, max_y){\n    let result = [];\n\n    for (let i=min_x; i<=max_x; i++){\n        result.push([i, get_random(min_y, max_y)])\n    }\n\n    return result;\n}\n\n\n// /// RANDOM COLOR\n// export function random_rgba() {\n//     var o = Math.round, r = Math.random, s = 123;\n//     return 'rgb(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\n// }\n\n\nexport function get_random_colors(number) {\n    let colors = [\"#a2cd9f\", \"#6ef4ef\", \"#ea6e2e\", \"#6e224c\", \"#edfc35\", \"\", \"\"];\n\n    return colors.slice(0, number);\n}\n\nexport function get_box_height(number){\n    if (number === 0){\n        return 0;\n    }\n    return 25*(number + 1) + 10;\n}\n\n\n///////////////////////////////\n// MOCKED DATA with DATES\n\n\nexport function get_random_mock_array_dates(dates, min_y, max_y){\n    let result = [];\n\n    for (let i=0; i<dates.length; i++){\n        result.push([i, dates[i] ,get_random(min_y, max_y)])\n    }\n\n    return result;\n}\n\n// export function get_random_mock_array_area_dates(dates, min_y, max_y){\n//     let result = [];\n//     let std\n\n//     for (let i=0; i<dates.length; i++){\n//         result.push([i, dates[i] ,get_random(min_y, max_y)])\n//     }\n\n//     return result;\n// }\n\nexport function scale_data_dates(data, ranges ,width, height){\n    let result = [];\n\n    let x_diff = ranges.max_x - ranges.min_x;\n    let y_diff = ranges.max_y - ranges.min_y;\n\n    let x_frame = width/x_diff;\n    let y_frame = height/y_diff;\n\n    for (let i=0; i<data.length; i++){\n        result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame ])\n    }\n\n    return result;\n}\n\nexport function scale_data_area_dates(data, ranges ,width, height, prefix=0){\n    let result = [];\n    let x_diff = ranges.max_x - ranges.min_x;\n    let y_diff = ranges.max_y - ranges.min_y;\n\n    console.log(\"%%\")\n    console.log(data)\n    console.log(x_diff)\n\n    let x_frame = width/x_diff;\n    let y_frame = height/y_diff;\n\n    for (let i=0; i<data.length; i++){\n        // console.log(data[i])\n        // if(i<255){\n        //     result.push([data[i][0] * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame ])\n        // }else{\n        //     result.push([(data[i][0] + 256) * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame ])\n        // }\n\n        result.push([(i+prefix+1) * x_frame, data[i][1], height - data[i][2] * y_frame, height - data[i][3] * y_frame, height - data[i][4] * y_frame ])\n        \n    }\n\n    // console.log(result)\n\n    return result;\n}\n\nexport function get_random_mock_area_array_dates(dates, min_y, max_y){\n    let result = [];\n    \n\n\n\n    for (let i=0; i<dates.length; i++){\n        let s_d1 = get_random(2,8);\n        let s_d2 = get_random(2,8);\n        let random = get_random(min_y, max_y);\n        result.push([i, dates[i], random, random - s_d1, random + s_d2])\n    }\n\n    return result;\n}\n\nexport function get_data_mocks_area_DATES(data_mocks_area_DATES1, data_mocks_area_DATES2, number){\n    let result = []\n\n    for(let i=0;i<number;i++){\n        result.push(data_mocks_area_DATES1[i].concat(data_mocks_area_DATES2[i]))\n    }\n\n    return result\n\n}\n\nexport function scale_data_mocks(data_mocks_area_DATES1, data_mocks_area_DATES2, ranges, width, height, number_of_plots){\n    let scaled_data_mocks_area_DATES = []\n    let scaled_data_mocks_area_future_DATES = []\n\n    for (let i=0; i<number_of_plots; i++){\n        scaled_data_mocks_area_DATES.push(scale_data_area_dates(data_mocks_area_DATES1[i], ranges, width, height));\n        // scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data_mocks_area_DATES2[i], ranges, width,  height, 256));\n        scaled_data_mocks_area_future_DATES.push(scale_data_area_dates(data_mocks_area_DATES2[i], ranges, width,  height, 8));\n    }\n\n    return [scaled_data_mocks_area_DATES, scaled_data_mocks_area_future_DATES]\n}\n\nexport function get_data_map_area_DATES(data_mocks_area_DATES, array_length_dates, number_of_plots){\n\n    let data_map_area_DATES = []\n\n    for(let i = 0; i<array_length_dates; i++) {\n        let y_data_normal = [];\n        let y_data_min = [];\n        let y_data_max = [];\n        let date;\n      \n        date = data_mocks_area_DATES[0][i][1]\n      \n      \n        for(let j=0; j<number_of_plots; j++) {\n          y_data_normal.push(data_mocks_area_DATES[j][i][2])\n          y_data_min.push(data_mocks_area_DATES[j][i][3])\n          y_data_max.push(data_mocks_area_DATES[j][i][4])\n        }\n      \n        data_map_area_DATES[i] = [i, date, y_data_normal, y_data_min, y_data_max]\n    }\n\n    return data_map_area_DATES;\n}\n\nexport function capitalizeString(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nexport function get_historical_dates(){\n    let dates = []\n    // dates.push(Date.UTC(2010, 1, 18))\n    // dates.push( Date.UTC(2010, 2, 18))\n    dates.push(Date.UTC(2010, 3, 18))\n    dates.push( Date.UTC(2010, 4, 18))\n    dates.push( Date.UTC(2010, 5, 18))\n    dates.push( Date.UTC(2010, 6, 18))\n    dates.push( Date.UTC(2010, 7, 18))\n    dates.push(Date.UTC(2010, 8, 18))\n    dates.push( Date.UTC(2010, 9, 18))\n    dates.push( Date.UTC(2010, 10, 18))\n    \n    return dates;\n}\n\nexport function get_forecasted_dates(){\n    let dates = [ Date(Date.UTC(2010, 11, 18)), Date(Date.UTC(2010, 12, 18))]\n\n    return dates;\n\n}"]},"metadata":{},"sourceType":"module"}