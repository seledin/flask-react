{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/components/Plot2.js\";\nimport React, { Component } from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from \"highcharts\"; // import Highcharts from 'highcharts' //core\n\nimport HC_more from 'highcharts/highcharts-more'; //module\n\nHC_more(Highcharts); //init module\n// require(\"highcharts/highcharts-more\")(Highcharts);\n\nclass PlotComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setHoverData = e => {\n      // The chart is not updated because `chartOptions` has not changed.\n      this.setState({\n        hoverData: e.target.category\n      });\n    };\n\n    this.updateSeries = () => {\n      // The chart is updated only with new options.\n      this.setState({\n        chartOptions: {\n          series: []\n        }\n      });\n    };\n\n    this.state = {\n      keywords: [],\n      hoverData: null\n    };\n  }\n\n  prepareData(keywords, data, futureData, dataRange, futureDataRange) {\n    let result = [];\n\n    for (let keyword in keywords) {\n      result.push({\n        name: keywords[keyword],\n        data: data[keyword],\n        color: Highcharts.getOptions().colors[keyword]\n      });\n      result.push({\n        name: keywords[keyword] + \" forecast\",\n        data: futureData[keyword],\n        dashStyle: 'shortdot',\n        color: Highcharts.getOptions().colors[keyword],\n        showInLegend: false\n      });\n      result.push({\n        name: keywords[keyword] + \" range\",\n        data: dataRange[keyword],\n        type: 'arearange',\n        color: Highcharts.getOptions().colors[keyword],\n        fillOpacity: 0.3,\n        showInLegend: false,\n        zIndex: 1,\n        lineWidth: 0,\n        marker: {\n          enabled: false\n        }\n      });\n      result.push({\n        name: keywords[keyword] + \" range forecast\",\n        data: futureDataRange[keyword],\n        type: 'arearange',\n        color: Highcharts.getOptions().colors[keyword],\n        fillOpacity: 0.3,\n        showInLegend: false,\n        zIndex: 1,\n        lineWidth: 0,\n        marker: {\n          enabled: false\n        }\n      });\n    } // console.log(JSON.stringify(result[0].data))\n\n\n    return result;\n  }\n\n  getLine(data) {\n    var last_element = data[0][data[0].length - 1];\n    return last_element[0];\n  }\n\n  render() {\n    let chartOptions = {\n      title: {\n        text: \"Keywords trends\"\n      },\n      xAxis: {\n        title: {\n          text: 'Date'\n        },\n        type: 'datetime',\n        dateTimeLabelFormats: {\n          day: '%e-%b-%y',\n          format: '%e-%b-%y',\n          month: '%b-%y',\n          year: '%b-%y',\n          step: 2000\n        },\n        plotLines: [{\n          color: 'red',\n          // Color value\n          value: this.getLine(this.props.data),\n          // Value of where the line will appear\n          width: 2 // Width of the line    \n\n        }]\n      },\n      yAxis: {\n        min: 0,\n        max: 100,\n        title: {\n          text: 'Search interest %'\n        }\n      },\n      mapNavigation: {\n        enableMouseWheelZoom: true\n      },\n      tooltip: {\n        crosshairs: true,\n        shared: true,\n        valueSuffix: \"%\",\n        headerFormat: '<b>Week: {point.key}</b><br>'\n      },\n      legend: {\n        show: true,\n        symbolHeight: 2,\n        symbolWidth: 30,\n        symbolRadius: 1\n      },\n      chart: {\n        zoomType: 'xy',\n        height: '45%'\n      },\n      series: this.prepareData(this.props.keywords, this.props.data, this.props.futureData, this.props.dataRanges, this.props.futureDataRanges),\n      plotOptions: {\n        series: {\n          point: {\n            events: {// mouseOver: this.setHoverData.bind(this)\n            }\n          },\n          states: {\n            hover: {\n              enabled: false\n            }\n          },\n          marker: {\n            enabled: false\n          }\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PlotComponent;","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/Plot2.js"],"names":["React","Component","HighchartsReact","Highcharts","HC_more","PlotComponent","constructor","props","setHoverData","e","setState","hoverData","target","category","updateSeries","chartOptions","series","state","keywords","prepareData","data","futureData","dataRange","futureDataRange","result","keyword","push","name","color","getOptions","colors","dashStyle","showInLegend","type","fillOpacity","zIndex","lineWidth","marker","enabled","getLine","last_element","length","render","title","text","xAxis","dateTimeLabelFormats","day","format","month","year","step","plotLines","value","width","yAxis","min","max","mapNavigation","enableMouseWheelZoom","tooltip","crosshairs","shared","valueSuffix","headerFormat","legend","show","symbolHeight","symbolWidth","symbolRadius","chart","zoomType","height","dataRanges","futureDataRanges","plotOptions","point","events","states","hover"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from \"highcharts\";\n\n// import Highcharts from 'highcharts' //core\nimport HC_more from 'highcharts/highcharts-more' //module\nHC_more(Highcharts) //init module\n\n// require(\"highcharts/highcharts-more\")(Highcharts);\n\nclass PlotComponent extends Component {\t\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tkeywords: [],\n\t\t\thoverData: null\n\t\t};\n\t}\n\n\tprepareData(keywords, data, futureData, dataRange, futureDataRange){\n\t\tlet result = []\n\n\t\tfor(let keyword in keywords){\n\t\t\tresult.push({\n\t\t\t\tname: keywords[keyword],\n\t\t\t\tdata: data[keyword],\n\t\t\t\tcolor: Highcharts.getOptions().colors[keyword]\n\t\t\t})\n\n\t\t\tresult.push({\n\t\t\t\tname: keywords[keyword] + \" forecast\",\n\t\t\t\tdata: futureData[keyword],\n\t\t\t\tdashStyle: 'shortdot',\n\t\t\t\tcolor: Highcharts.getOptions().colors[keyword],\n\t\t\t\tshowInLegend: false,          \n\t\t\t})\n\n\t\t\tresult.push({\n\t\t\t\tname: keywords[keyword] + \" range\",\n\t\t\t\tdata: dataRange[keyword],\n\t\t\t\ttype: 'arearange',\n\t\t\t\tcolor: Highcharts.getOptions().colors[keyword],\n\t\t\t\tfillOpacity: 0.3,\n\t\t\t\tshowInLegend: false,  \n\t\t\t\tzIndex: 1,\n\t\t\t\tlineWidth: 0,  \n\t\t\t\tmarker: {\n\t\t\t\t\tenabled: false\n\t\t \t\t}\n\t\t\t})\t\n\t\t\t\t\n\t\t\tresult.push({\n\t\t\t\tname: keywords[keyword] + \" range forecast\",\n\t\t\t\tdata: futureDataRange[keyword],\n\t\t\t\ttype: 'arearange',\n\t\t\t\tcolor: Highcharts.getOptions().colors[keyword],\n\t\t\t\tfillOpacity: 0.3,\n\t\t\t\tshowInLegend: false,  \n\t\t\t\tzIndex: 1,  \n\t\t\t\tlineWidth: 0,\n\t\t\t\tmarker: {\n\t\t\t\t\tenabled: false\n\t\t \t\t}\n\t\t\t})\t\n\n\t\t}\n\n\t\t// console.log(JSON.stringify(result[0].data))\n\n\t\treturn result;\n\t}\n\n\tsetHoverData = (e) => { \n\t\t// The chart is not updated because `chartOptions` has not changed.\n\t\tthis.setState({ hoverData: e.target.category })\n\t}\n\t\n\tupdateSeries = () => {\n\t\t// The chart is updated only with new options.\n\t\tthis.setState({ \n\t\t  chartOptions: {\n\t\t\tseries: [\n\n\t\t\t]\n\t\t  }\n\t\t});\n\t}\n\n\tgetLine(data){\n\t\tvar last_element = data[0][data[0].length - 1];\n\t\treturn last_element[0]\n\t}\n\n    render() {\n\n\t\tlet chartOptions = {\n\n\t\t\ttitle: {\n\t\t\t\ttext: \"Keywords trends\"\n\t\t\t},\n\t\t\t\n\t\t\txAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Date'\n\t\t\t\t},\n\t\t\t\ttype: 'datetime',\n\t\t\t\tdateTimeLabelFormats: {\n\t\t\t\t\tday: '%e-%b-%y',\n\t\t\t\t\tformat: '%e-%b-%y',\n\t\t\t\t\tmonth: '%b-%y',\n\t\t\t\t\tyear: '%b-%y',\n\t\t\t\t\tstep: 2000\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\tcolor: 'red', // Color value\n\t\t\t\t\tvalue: this.getLine(this.props.data), // Value of where the line will appear\n\t\t\t\t\twidth: 2 // Width of the line    \n\t\t\t\t}]\n\t\t\t},\n\t\t\t\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 100,\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Search interest %'\n\t\t\t\t},\n\n\t\t\t},\n\n\t\t\tmapNavigation: {\n\t\t\t\tenableMouseWheelZoom: true\n\t\t\t},\n\t\t\t\n\t\t\ttooltip: {\n\t\t\t\tcrosshairs: true,\n\t\t\t\tshared: true,\n\t\t\t\tvalueSuffix: \"%\",\n\t\t\t\theaderFormat: '<b>Week: {point.key}</b><br>',\n\t\t\t},\n\t\t\t\n\t\t\tlegend: {\n\t\t\t\tshow: true,\n\t\t\t\tsymbolHeight: 2,\n\t\t\t\tsymbolWidth: 30,\n\t\t\t\tsymbolRadius: 1\n\t\t\t},\n\t\t\tchart: {\n\t\t\t\tzoomType: 'xy',\n\t\t\t\theight: '45%',\n\t\t\t},\n\t\t\tseries: this.prepareData(this.props.keywords, this.props.data, this.props.futureData, this.props.dataRanges, this.props.futureDataRanges),\n\t\t\tplotOptions: {\n\t\t\t  series: {\n\t\t\t\tpoint: {\n\t\t\t\t  events: {\n\t\t\t\t\t// mouseOver: this.setHoverData.bind(this)\n\t\t\t\t  }\n\t\t\t\t},\n\t\t\t\tstates:{\n\t\t\t\t\thover: {\n\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmarker: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t}\n\n\t\t\t  }\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t  <HighchartsReact\n\t\t\t\thighcharts={Highcharts}\n\t\t\t\toptions= {chartOptions}\n\t\t\t  />\n\t\t\t</div>\n\t\t  )\n\t}\n}\n\nexport default PlotComponent"]},"metadata":{},"sourceType":"module"}