{"ast":null,"code":"function make_line(point, width) {\n  let line = `M 0 ${point} H ${width}`;\n  return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`;\n}\n\nexport function get_lines(width, height, lines_number) {\n  let frame = height / lines_number;\n  let result = [];\n\n  for (let i = 0; i <= lines_number; i++) {\n    let point = frame * i;\n    result.push(make_line(point, width));\n  }\n\n  return result;\n}\n\nfunction make_x_tick(x, y) {\n  let line = `M ${x} ${y} L ${x} ${y + 10}`;\n  return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`;\n}\n\nexport function get_ticks(width, height, ticks_number) {\n  let result = [];\n  let frame = width / (ticks_number - 1);\n\n  for (let i = 0; i < ticks_number; i++) {\n    let point = frame * i;\n    result.push(make_x_tick(point, height));\n  }\n\n  return result;\n}\n\nfunction make_y_tick(x, y, value) {\n  return `<text x=\"${x}\" textAnchor=\"end\" class=\"plot_ytick\" y=\"${y}\">${value}</text>`;\n}\n\nexport function get_y_axis(height, lines_number) {\n  let result = [];\n  let frame = height / 10;\n\n  for (let i = 0; i <= lines_number; i++) {\n    result.push(make_y_tick(-40, height - frame * i, i * 10));\n  }\n\n  return result;\n}\nexport function prepare_title(title, width, height, x_trans, y_trans) {\n  return `<text x=\"${width / 2}\" class=\"plot_title\" text-anchor=\"middle\" y=\"${-y_trans / 3}\">${title}</text>`;\n}\nexport function prepare_x_axis(width, height, ticks_number, data_mock) {\n  let result = [];\n  let length = Object.keys(data_mock).length;\n  let data_frame = Math.floor(length / ticks_number - 1);\n  let frame = width / (ticks_number - 1);\n\n  for (let i = 0; i < ticks_number; i++) {\n    result.push(`<text x=\"${frame * i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[data_frame * i][1])}</text>`);\n  }\n\n  return result;\n}\nexport function get_x_axis_label(title, width, height, x_trans, y_trans) {\n  return `<text x=\"${width / 2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + y_trans / 2}\"><tspan>${title}</tspan></text>`;\n}\nexport function get_y_axis_label(title, height, x_trans) {\n  return `<text x=\"${x_trans}\" text-anchor=\"middle\" transform=\"translate(0,0) rotate(270 25.140625 309.5)\" class=\"plot_yaxis_title\" y=\"${(height + x_trans) / 2 - 0.8 * x_trans}\"><tspan>${title}</tspan></text>`;\n}\nexport function get_red_line(dimensions, ranges_dates) {\n  let x_frame = dimensions.width / ranges_dates.max_x;\n  let x = x_frame * 256;\n  return `<g>\n        <path fill=\"none\" class=\"plot_pointer_line\" d=\"M ${x} 0 L ${x} ${dimensions.height}\" stroke-dasharray=\"5\" data-z-index=\"0\"></path>\n    </g>`;\n}\nexport function get_mark_line(mark_line, height) {\n  return `<g transform=\"translate(${mark_line.pos}, 0)\">\n        <path fill=\"none\" data-z-index=\"0\" class=\"plot_mark_line\" d=\"M 0 0 L 0 ${height}\" visibility=\"${mark_line.visibility}\" />         \n    </g>`;\n} // export function get_info_box2(info_box, box_width, box_height){ \n//     let y_data = [];\n//     // console.log(info_box.value_y)\n//     if(info_box !== undefined && info_box.value_y !== undefined) {\n//         for(let i=0; i<info_box.colors.length; i++){\n//             y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n//             <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1)*25 + 25}>Series ${i + 1} value y: ${info_box.value_y[2][i]}</text>`)\n//         }\n//     }\n//     let date = formatDate(info_box.value_x)\n//     return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n//         <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n//         <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n//         ${y_data}\n//     </g>`\n// }\n\nexport function get_info_box(info_box, box_width, box_height, keywords) {\n  let y_data = []; // console.log(info_box.value_y)\n\n  if (info_box !== undefined && info_box.value_y !== undefined) {\n    for (let i = 0; i < info_box.colors.length; i++) {\n      y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1) * 25 + 22} L 20 ${(i + 1) * 25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n            <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1) * 25 + 25}>${keywords[i]} value y: ${info_box.value_y[2][i]}, min: ${info_box.value_y[3][i]}, max: ${info_box.value_y[2][i]}</text>`);\n    }\n  }\n\n  let date = formatDate(info_box.value_x);\n  return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n        <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n        <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n        ${y_data}\n    </g>`;\n}\nexport function prepare_legend(width, height, colors, keywords) {\n  let legend = [];\n\n  for (let i = 0; i < colors.length; i++) {\n    legend.push(`\n        \n        <g data-z-index=\"1\" transform=\"translate(${87 * i + 8},3)\">\n            <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} strokeWidth=\"1\"></path>\n            <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"0.9em\" stroke=\"#6c757d\">${keywords[i]}</text>\n        </g>\n\n        `);\n  }\n\n  return `\n        <g transform=\"translate(${width}, ${height})\" class=\"plot_legend\" >\n            ${legend}\n        </g>\n    `;\n}\n\nfunction formatDate(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = dd + '-' + mm + '-' + yyyy;\n}\n\nfunction formatDate_monthly(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = mm + '-' + yyyy;\n}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/utils_dates/graphics.js"],"names":["make_line","point","width","line","get_lines","height","lines_number","frame","result","i","push","make_x_tick","x","y","get_ticks","ticks_number","make_y_tick","value","get_y_axis","prepare_title","title","x_trans","y_trans","prepare_x_axis","data_mock","length","Object","keys","data_frame","Math","floor","formatDate_monthly","get_x_axis_label","get_y_axis_label","get_red_line","dimensions","ranges_dates","x_frame","max_x","get_mark_line","mark_line","pos","visibility","get_info_box","info_box","box_width","box_height","keywords","y_data","undefined","value_y","colors","date","formatDate","value_x","pos_x","pos_y","prepare_legend","legend","d","Date","dd","getDate","mm","getMonth","yyyy","getFullYear"],"mappings":"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","sourcesContent":["\n\n\nfunction make_line (point, width) {\n\n    let line = `M 0 ${point} H ${width}`;\n    return `<path d=\"${line}\" fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />`\n}\n\nexport function get_lines (width, height, lines_number) {\n\n    let frame = height / lines_number;\n\n    let result = [];\n\n    for (let i=0; i<=lines_number; i++){\n        let point = frame * i;\n        result.push(make_line(point,width))\n    }\n\n    return result;\n}\n\n\nfunction make_x_tick(x, y) {\n\n    let line = `M ${x} ${y} L ${x} ${y + 10}`;\n    return `<path class=\"plot_xmark\" d=\"${line}\" data-z-index=\"0\" />`\n}\n\nexport function get_ticks(width, height, ticks_number){\n    let result = [];\n\n    let frame = width / (ticks_number - 1);\n\n    for (let i=0; i<ticks_number; i++){\n        let point = frame * i;\n        result.push(make_x_tick(point, height))\n    }\n\n    return result;\n}\n\nfunction make_y_tick(x, y, value) {\n    return `<text x=\"${x}\" textAnchor=\"end\" class=\"plot_ytick\" y=\"${y}\">${value}</text>`\n}\n\nexport function get_y_axis(height, lines_number) {\n    let result = [];\n\n    let frame = height / 10;\n\n    for(let i=0; i<=lines_number; i++){\n        result.push(make_y_tick(-40, height - frame*(i),i * 10));\n    }\n\n    return result;\n}\n\nexport function prepare_title(title, width, height, x_trans, y_trans){\n    return `<text x=\"${width/2}\" class=\"plot_title\" text-anchor=\"middle\" y=\"${-y_trans/3}\">${title}</text>`\n}\n\n\n\nexport function prepare_x_axis(width, height, ticks_number, data_mock){\n    let result = []\n\n    let length = Object.keys(data_mock).length;\n    let data_frame = Math.floor(length/ticks_number-1);\n\n    let frame = width / (ticks_number - 1)\n    for(let i=0; i<ticks_number; i++){\n        result.push(`<text x=\"${frame*i}\" class=\"plot_xtick\" text-anchor=\"middle\" y=\"${height + 30}\">${formatDate_monthly(data_mock[data_frame*i][1])}</text>`)\n    }\n\n    return result \n\n}\n\nexport function get_x_axis_label(title, width, height, x_trans, y_trans){\n    return `<text x=\"${width/2}\" text-anchor=\"middle\" class=\"plot_xaxis_title\" y=\"${height + y_trans/2}\"><tspan>${title}</tspan></text>`\n}\n\nexport function get_y_axis_label(title, height, x_trans){\n    return `<text x=\"${x_trans}\" text-anchor=\"middle\" transform=\"translate(0,0) rotate(270 25.140625 309.5)\" class=\"plot_yaxis_title\" y=\"${(height + x_trans)/2 - 0.8*x_trans}\"><tspan>${title}</tspan></text>`\n}\n\nexport function get_red_line(dimensions, ranges_dates){\n\n    let x_frame = dimensions.width/ranges_dates.max_x\n\n    let x = x_frame * 256;\n\n\n    return `<g>\n        <path fill=\"none\" class=\"plot_pointer_line\" d=\"M ${x} 0 L ${x} ${dimensions.height}\" stroke-dasharray=\"5\" data-z-index=\"0\"></path>\n    </g>`\n}\n\nexport function get_mark_line(mark_line, height){\n    return `<g transform=\"translate(${mark_line.pos}, 0)\">\n        <path fill=\"none\" data-z-index=\"0\" class=\"plot_mark_line\" d=\"M 0 0 L 0 ${height}\" visibility=\"${mark_line.visibility}\" />         \n    </g>`\n}\n\n// export function get_info_box2(info_box, box_width, box_height){ \n\n//     let y_data = [];\n//     // console.log(info_box.value_y)\n    \n//     if(info_box !== undefined && info_box.value_y !== undefined) {\n//         for(let i=0; i<info_box.colors.length; i++){\n//             y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n//             <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1)*25 + 25}>Series ${i + 1} value y: ${info_box.value_y[2][i]}</text>`)\n//         }\n//     }\n\n//     let date = formatDate(info_box.value_x)\n    \n//     return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n//         <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n//         <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n//         ${y_data}\n//     </g>`\n// }\n\nexport function get_info_box(info_box, box_width, box_height, keywords){ \n\n    let y_data = [];\n    // console.log(info_box.value_y)\n    \n    if(info_box !== undefined && info_box.value_y !== undefined) {\n        for(let i=0; i<info_box.colors.length; i++){\n            y_data.push(`<path fill=\"none\" d=\"M 5 ${(i + 1)*25 + 22} L 20 ${(i + 1)*25 + 22}\" stroke=\"${info_box.colors[i]}\" strokeWidth=\"2\" opacity=\"1\"></path>\n            <text stroke=\"#343640\" opacity=\"1\" x=25 y=${(i + 1)*25 + 25}>${keywords[i]} value y: ${info_box.value_y[2][i]}, min: ${info_box.value_y[3][i]}, max: ${info_box.value_y[2][i]}</text>`)\n        }\n    }\n\n    let date = formatDate(info_box.value_x)\n    \n    return `<g transform=\"translate(${info_box.pos_x}, ${info_box.pos_y})\" data-z-index=\"1\" class=\"plot_info_box\" visibility=${info_box.visibility}>\n        <rect x=\"0\" y=\"0\" width=${box_width} height=${box_height}  />   \n        <text x=5 y=\"25\" class=\"plot_info_box_header\">Date: ${date}</text>\n        ${y_data}\n    </g>`\n}\n\nexport function prepare_legend(width, height, colors, keywords){\n\n    let legend = [];\n\n    for(let i=0; i<colors.length; i++){\n        legend.push(`\n        \n        <g data-z-index=\"1\" transform=\"translate(${87*i + 8},3)\">\n            <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke=${colors[i]} strokeWidth=\"1\"></path>\n            <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"0.9em\" stroke=\"#6c757d\">${keywords[i]}</text>\n        </g>\n\n        `);\n    }\n\n    return `\n        <g transform=\"translate(${width}, ${height})\" class=\"plot_legend\" >\n            ${legend}\n        </g>\n    `\n}\n\nfunction formatDate(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = dd+'-'+mm+'-'+yyyy\n}\n\nfunction formatDate_monthly(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = mm+'-'+yyyy\n}\n"]},"metadata":{},"sourceType":"module"}