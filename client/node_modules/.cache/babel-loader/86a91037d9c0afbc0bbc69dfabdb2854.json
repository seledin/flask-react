{"ast":null,"code":"var _jsxFileName = \"/Users/marcin/workspace/react/flask-react-app/client/src/components/plot3/src/plot/parts/AxisX.js\";\nimport React from 'react';\nexport const AxisX = props => {\n  let ticks = props.ticks + 1;\n\n  if (props.dimensions.width <= 700) {\n    ticks = 6 + 1;\n  }\n\n  return React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, get_ticks(props.dimensions.width, props.dimensions.height, ticks), prepare_x_axis(props.dimensions.width, props.dimensions.height, ticks, props.dates, props.x_label, props.dimensions.y_trans2));\n};\nexport default AxisX;\n\nfunction make_x_tick(x, y) {\n  let line = `M ${x} ${y} L ${x} ${y + 10}`;\n  return React.createElement(\"path\", {\n    key: x,\n    class: \"plot_xmark\",\n    d: line,\n    \"data-z-index\": \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n}\n\nfunction get_ticks(width, height, ticks_number) {\n  let result = [];\n  let frame = width / (ticks_number - 1);\n\n  for (let i = 0; i < ticks_number; i++) {\n    let point = frame * i;\n    result.push(make_x_tick(point, height));\n  }\n\n  return result;\n}\n\nfunction prepare_x_axis(width, height, ticks_number, data_mock, title, y_trans) {\n  let result = [];\n  let length = Object.keys(data_mock).length;\n  let data_frame = Math.floor(length / (ticks_number - 1));\n  let frame = width / (ticks_number - 1);\n\n  if (width <= 700) {\n    for (let i = 0; i < ticks_number; i++) {\n      result.push(React.createElement(\"text\", {\n        key: i,\n        x: frame * i,\n        class: \"plot_xtick\",\n        \"text-anchor\": \"middle\",\n        y: height + 25,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, formatDate_monthly(data_mock[data_frame * i][1])));\n    }\n  } else {\n    for (let i = 0; i < ticks_number; i++) {\n      result.push(React.createElement(\"text\", {\n        key: i,\n        x: frame * i,\n        class: \"plot_xtick\",\n        \"text-anchor\": \"middle\",\n        y: height + 25,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, formatDate(data_mock[data_frame * i][1])));\n    }\n  }\n\n  let line = `M 0 ${height} H ${width}`;\n  let height_trans = y_trans;\n\n  if (width > 700) {\n    result.push(React.createElement(\"text\", {\n      x: width / 2,\n      \"text-anchor\": \"middle\",\n      class: \"plot_xaxis_title\",\n      y: height + height_trans - 30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"tspan\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, title)));\n  } else {\n    result.push(React.createElement(\"text\", {\n      x: width / 2,\n      \"text-anchor\": \"middle\",\n      class: \"plot_xaxis_title\",\n      y: height + 40,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"tspan\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, title)));\n  }\n\n  result.push(React.createElement(\"path\", {\n    d: line,\n    fill: \"none\",\n    class: \"plot_line\",\n    \"data-z-index\": \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n  return result;\n}\n\nfunction formatDate(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = dd + '-' + mm + '-' + yyyy;\n}\n\nfunction formatDate_monthly(d) {\n  let date = new Date(d);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n\n  ;\n  return d = mm + '-' + yyyy;\n}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot3/src/plot/parts/AxisX.js"],"names":["React","AxisX","props","ticks","dimensions","width","get_ticks","height","prepare_x_axis","dates","x_label","y_trans2","make_x_tick","x","y","line","ticks_number","result","frame","i","point","push","data_mock","title","y_trans","length","Object","keys","data_frame","Math","floor","formatDate_monthly","formatDate","height_trans","d","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport const AxisX = props => {\n\n  let ticks = props.ticks + 1;\n    \n  if(props.dimensions.width<=700){\n    ticks = 6 + 1;\n  }\n\n\n  return (\n    <g>\n        {get_ticks(props.dimensions.width, props.dimensions.height, ticks)}\n        {prepare_x_axis(props.dimensions.width, props.dimensions.height, ticks, props.dates, props.x_label, props.dimensions.y_trans2)}\n    </g>\n  )\n};\n\nexport default AxisX\n\n\n\nfunction make_x_tick(x, y) {\n\n    let line = `M ${x} ${y} L ${x} ${y + 10}`;\n    return <path key={x} class=\"plot_xmark\" d={line} data-z-index=\"0\" />\n}\n\nfunction get_ticks(width, height, ticks_number){\n    let result = [];\n\n    let frame = width / (ticks_number - 1);\n\n    for (let i=0; i<ticks_number; i++){\n        let point = frame * i;\n        result.push(make_x_tick(point, height))\n    }\n\n    return result;\n}\n\n\nfunction prepare_x_axis(width, height, ticks_number, data_mock, title, y_trans){\n  let result = []\n\n  let length = Object.keys(data_mock).length;\n  let data_frame = Math.floor(length/(ticks_number-1));\n\n  let frame = width / (ticks_number - 1)\n\n  if(width<=700){\n      for(let i=0; i<ticks_number; i++){\n          result.push(<text key={i} x={frame*i} class=\"plot_xtick\" text-anchor=\"middle\" y={height + 25}>{formatDate_monthly(data_mock[data_frame*i][1])}</text>)\n      }\n  }else{\n      for(let i=0; i<ticks_number; i++){\n          result.push(<text key={i} x={frame*i} class=\"plot_xtick\" text-anchor=\"middle\" y={height + 25}>{formatDate(data_mock[data_frame*i][1])}</text>)\n      }\n  }\n\n  let line = `M 0 ${height} H ${width}`;\n\n  let height_trans = y_trans\n\n  if(width>700){\n      result.push(<text x={width/2} text-anchor=\"middle\" class=\"plot_xaxis_title\" y={height + height_trans - 30}><tspan>{title}</tspan></text>)\n  }else{\n      result.push(<text x={width/2} text-anchor=\"middle\" class=\"plot_xaxis_title\" y={height +40}><tspan>{title}</tspan></text>)\n  }\n  result.push(<path d={line} fill=\"none\" class=\"plot_line\" data-z-index=\"0\" />)\n\n  return result \n\n}\n\n\n\nfunction formatDate(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = dd+'-'+mm+'-'+yyyy\n}\n\nfunction formatDate_monthly(d)\n {\n  let date = new Date(d)\n  var dd = date.getDate(); \n  var mm = date.getMonth()+1;\n  var yyyy = date.getFullYear(); \n  if(dd<10){dd='0'+dd} \n  if(mm<10){mm='0'+mm};\n  return d = mm+'-'+yyyy\n}"]},"metadata":{},"sourceType":"module"}