{"ast":null,"code":"import React from'react';import{capitalizeString}from\"./functions\";export var Legend=function Legend(props){return React.createElement(\"g\",null,prepare_legend(props.dimensions,props.colors,props.keywords));};export default Legend;function prepare_legend(dimensions,colors,keywords){var legend=[];var keyword_sizes=[];if(dimensions.width2>700){for(var i=0;i<colors.length;i++){var l=calculate_translate_for_legend(keywords[i].length);var _translation=keyword_sizes.reduce(function(a,b){return a+b;},0);legend.push(React.createElement(\"g\",{key:i,\"data-z-index\":\"1\",transform:\"translate(\".concat(_translation,\",3)\")},React.createElement(\"path\",{fill:\"none\",d:\"M 0 11 L 30 11\",stroke:colors[i],\"stroke-width\":\"0\"}),React.createElement(\"text\",{x:\"35\",textAnchor:\"start\",\"data-z-index\":\"0\",y:\"15\",fontSize:\"12px\",stroke:\"#6c757d\",\"stroke-width\":\"0\"},capitalizeString(keywords[i]))));keyword_sizes.push(l);}var translation=keyword_sizes.reduce(function(a,b){return a+b;},0);var width_trans=dimensions.width2/2-translation/2-dimensions.x_trans;var height_trans=dimensions.height+dimensions.y_trans/2;height_trans=dimensions.height+dimensions.y_trans-dimensions.y_trans2;height_trans=dimensions.height+dimensions.y_trans-25;return React.createElement(\"g\",{transform:\"translate(\".concat(width_trans,\", \").concat(height_trans,\")\"),class:\"plot_legend\"},legend);}else{for(var _i=0;_i<keywords.length;_i++){var _l=calculate_translate_for_legend(keywords[_i].length);keyword_sizes.push(_l);}for(var _i2=0;_i2<colors.length;_i2++){var trans=Math.max.apply(Math,keyword_sizes);legend.push(React.createElement(\"g\",{\"data-z-index\":\"1\",transform:\"translate(\".concat(dimensions.width/2-trans/2,\", \").concat(_i2*18+10,\")\")},React.createElement(\"path\",{fill:\"none\",d:\"M 0 11 L 30 11\",stroke:colors[_i2],\"stroke-width\":\"0\"}),React.createElement(\"text\",{x:\"35\",textAnchor:\"start\",\"data-z-index\":\"0\",y:\"15\",\"font-size\":\"12px\",stroke:\"#6c757d\",\"stroke-width\":\"0\"},capitalizeString(keywords[_i2]))));}var _height_trans=dimensions.height+43;return React.createElement(\"g\",{transform:\"translate(\".concat(0,\", \",_height_trans,\")\"),class:\"plot_legend\"},legend);}}function calculate_translate_for_legend(keyword_length){return(6,5)*keyword_length+55;}","map":{"version":3,"sources":["/Users/marcin/workspace/react/flask-react-app/client/src/components/plot3/src/plot/parts/Legend.js"],"names":["React","capitalizeString","Legend","props","prepare_legend","dimensions","colors","keywords","legend","keyword_sizes","width2","i","length","l","calculate_translate_for_legend","translation","reduce","a","b","push","width_trans","x_trans","height_trans","height","y_trans","y_trans2","trans","Math","max","width","keyword_length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { capitalizeString } from \"./functions\";\n\nexport const Legend = props => {\n  return (\n    <g>{prepare_legend(props.dimensions, props.colors, props.keywords)}</g>\n  )\n};\n\nexport default Legend\n\n\n\n   function prepare_legend(dimensions, colors, keywords){\n\n    let legend = [];\n    let keyword_sizes = []\n\n    if (dimensions.width2>700){\n        for(let i=0; i<colors.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n            \n    \n            let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n    \n            legend.push(\n              <g key={i} data-z-index=\"1\" transform={`translate(${translation},3)`}>\n                  <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke={colors[i]} stroke-width=\"0\"></path>\n                  <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" fontSize=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">{capitalizeString(keywords[i])}</text>\n              </g>\n        );\n\n            keyword_sizes.push(l);\n        }\n\n        let translation = keyword_sizes.reduce((a, b) => a + b, 0);\n        let width_trans = (dimensions.width2)/2 - translation/2 - dimensions.x_trans;\n        let height_trans = dimensions.height + dimensions.y_trans/2;\n        height_trans = dimensions.height + dimensions.y_trans - dimensions.y_trans2;\n        height_trans = dimensions.height + dimensions.y_trans - 25;\n    \n        return (\n            <g transform={`translate(${width_trans}, ${height_trans})`} class=\"plot_legend\" >\n                {legend}\n            </g>)\n        \n    } else {\n        for(let i=0; i<keywords.length; i++){\n            let l = calculate_translate_for_legend(keywords[i].length);\n            keyword_sizes.push(l);\n        }\n\n        for(let i=0; i<colors.length; i++){\n\n            let trans = Math.max(...keyword_sizes);\n    \n            legend.push(\n            <g data-z-index=\"1\" transform={`translate(${(dimensions.width)/2 - trans/2}, ${i*18+10})`}>\n                <path fill=\"none\" d=\"M 0 11 L 30 11\" stroke={colors[i]} stroke-width=\"0\"></path>\n                <text x=\"35\" textAnchor=\"start\" data-z-index=\"0\" y=\"15\" font-size=\"12px\" stroke=\"#6c757d\" stroke-width=\"0\">{capitalizeString(keywords[i])}</text>\n            </g>\n        );\n        }\n\n        let height_trans = dimensions.height + 43;\n    \n        return (\n            <g transform={`translate(${0}, ${height_trans})`} class=\"plot_legend\" >\n                {legend}\n            </g>)\n    }\n}\n\nfunction calculate_translate_for_legend(keyword_length){\n    return (6,5)*keyword_length + 55;\n}"]},"metadata":{},"sourceType":"module"}